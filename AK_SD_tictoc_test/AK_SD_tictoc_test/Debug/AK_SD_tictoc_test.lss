
AK_SD_tictoc_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000010c8  0000115c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080015c  0080015c  000011b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020aa  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088b  00000000  00000000  00003462  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a80  00000000  00000000  00003ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  00004770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068d  00000000  00000000  00004d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002567  00000000  00000000  00005409  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00007970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ec       	ldi	r30, 0xC8	; 200
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 35       	cpi	r26, 0x5C	; 92
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e5       	ldi	r26, 0x5C	; 92
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 36       	cpi	r26, 0x69	; 105
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 8a 07 	call	0xf14	; 0xf14 <main>
      9e:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_spi>:
//-----------------------------------
// Initialize SPI               
//-----------------------------------
void init_spi(void) {
	/* Set MOSI and SCK output, all others input */
    DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
      a6:	8c e2       	ldi	r24, 0x2C	; 44
      a8:	84 b9       	out	0x04, r24	; 4
    /* Enable SPI, Master, set clock rate fck/4 */
	/* SPCR = ( 1<<SPE | 1<<MSTR | 1<<SPR0 | 1<<SPR1); */
	SPCR = ( 1<<SPE | 1<<MSTR );
      aa:	80 e5       	ldi	r24, 0x50	; 80
      ac:	8c bd       	out	0x2c, r24	; 44
      ae:	08 95       	ret

000000b0 <xmit_spi>:

//-----------------------------------
// Transmit a byte to MMC via SPI               
//-----------------------------------
BYTE xmit_spi(BYTE c) {
	SPDR = c;
      b0:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
      b2:	0d b4       	in	r0, 0x2d	; 45
      b4:	07 fe       	sbrs	r0, 7
      b6:	fd cf       	rjmp	.-6      	; 0xb2 <xmit_spi+0x2>
	return SPDR;
      b8:	8e b5       	in	r24, 0x2e	; 46
}
      ba:	08 95       	ret

000000bc <rcv_spi>:

//-----------------------------------
// Receive a byte from MMC via SPI               
//-----------------------------------
BYTE rcv_spi(void) {
	return xmit_spi(0xFF);
      bc:	8f ef       	ldi	r24, 0xFF	; 255
      be:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
      c2:	08 95       	ret

000000c4 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
      c4:	ff 92       	push	r15
      c6:	0f 93       	push	r16
      c8:	1f 93       	push	r17
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	c8 2f       	mov	r28, r24
      d0:	d4 2f       	mov	r29, r20
      d2:	15 2f       	mov	r17, r21
      d4:	06 2f       	mov	r16, r22
      d6:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
      d8:	88 23       	and	r24, r24
      da:	4c f4       	brge	.+18     	; 0xee <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
      dc:	40 e0       	ldi	r20, 0x00	; 0
      de:	50 e0       	ldi	r21, 0x00	; 0
      e0:	ba 01       	movw	r22, r20
      e2:	87 e7       	ldi	r24, 0x77	; 119
      e4:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
		if (res > 1) return res;
      e8:	82 30       	cpi	r24, 0x02	; 2
      ea:	40 f5       	brcc	.+80     	; 0x13c <send_cmd+0x78>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
      ec:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
      ee:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
      f0:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
	SELECT();
      f4:	2a 98       	cbi	0x05, 2	; 5
	rcv_spi();
      f6:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
      fa:	8c 2f       	mov	r24, r28
      fc:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     100:	8f 2d       	mov	r24, r15
     102:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     106:	80 2f       	mov	r24, r16
     108:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     10c:	81 2f       	mov	r24, r17
     10e:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     112:	8d 2f       	mov	r24, r29
     114:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     118:	c0 34       	cpi	r28, 0x40	; 64
     11a:	21 f0       	breq	.+8      	; 0x124 <send_cmd+0x60>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     11c:	c8 34       	cpi	r28, 0x48	; 72
     11e:	21 f4       	brne	.+8      	; 0x128 <send_cmd+0x64>
     120:	87 e8       	ldi	r24, 0x87	; 135
     122:	03 c0       	rjmp	.+6      	; 0x12a <send_cmd+0x66>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     124:	85 e9       	ldi	r24, 0x95	; 149
     126:	01 c0       	rjmp	.+2      	; 0x12a <send_cmd+0x66>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
     128:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
     12a:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
     12e:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
     130:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
	} while ((res & 0x80) && --n);
     134:	88 23       	and	r24, r24
     136:	14 f4       	brge	.+4      	; 0x13c <send_cmd+0x78>
     138:	c1 50       	subi	r28, 0x01	; 1
     13a:	d1 f7       	brne	.-12     	; 0x130 <send_cmd+0x6c>

	return res;			/* Return with the response value */
}
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	1f 91       	pop	r17
     142:	0f 91       	pop	r16
     144:	ff 90       	pop	r15
     146:	08 95       	ret

00000148 <release_spi>:
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
     148:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
     14a:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
     14e:	08 95       	ret

00000150 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	00 d0       	rcall	.+0      	; 0x162 <disk_initialize+0x12>
     162:	00 d0       	rcall	.+0      	; 0x164 <disk_initialize+0x14>
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;

	init_spi();
     168:	0e 94 53 00 	call	0xa6	; 0xa6 <init_spi>
     16c:	14 e6       	ldi	r17, 0x64	; 100

//#if _WRITE_FUNC
//	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
//#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */
     16e:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
     172:	11 50       	subi	r17, 0x01	; 1
     174:	e1 f7       	brne	.-8      	; 0x16e <disk_initialize+0x1e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	50 e0       	ldi	r21, 0x00	; 0
     17a:	ba 01       	movw	r22, r20
     17c:	80 e4       	ldi	r24, 0x40	; 64
     17e:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	09 f0       	breq	.+2      	; 0x188 <disk_initialize+0x38>
     186:	7d c0       	rjmp	.+250    	; 0x282 <disk_initialize+0x132>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
     188:	4a ea       	ldi	r20, 0xAA	; 170
     18a:	51 e0       	ldi	r21, 0x01	; 1
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	88 e4       	ldi	r24, 0x48	; 72
     192:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	09 f0       	breq	.+2      	; 0x19c <disk_initialize+0x4c>
     19a:	42 c0       	rjmp	.+132    	; 0x220 <disk_initialize+0xd0>
     19c:	ce 01       	movw	r24, r28
     19e:	01 96       	adiw	r24, 0x01	; 1
     1a0:	7c 01       	movw	r14, r24
     1a2:	6e 01       	movw	r12, r28
     1a4:	95 e0       	ldi	r25, 0x05	; 5
     1a6:	c9 0e       	add	r12, r25
     1a8:	d1 1c       	adc	r13, r1
     1aa:	87 01       	movw	r16, r14
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
     1ac:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
     1b0:	f8 01       	movw	r30, r16
     1b2:	81 93       	st	Z+, r24
     1b4:	8f 01       	movw	r16, r30
     1b6:	ec 15       	cp	r30, r12
     1b8:	fd 05       	cpc	r31, r13
     1ba:	c1 f7       	brne	.-16     	; 0x1ac <disk_initialize+0x5c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     1bc:	8b 81       	ldd	r24, Y+3	; 0x03
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	09 f0       	breq	.+2      	; 0x1c4 <disk_initialize+0x74>
     1c2:	61 c0       	rjmp	.+194    	; 0x286 <disk_initialize+0x136>
     1c4:	8c 81       	ldd	r24, Y+4	; 0x04
     1c6:	8a 3a       	cpi	r24, 0xAA	; 170
     1c8:	31 f0       	breq	.+12     	; 0x1d6 <disk_initialize+0x86>
//#if _WRITE_FUNC
//	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
//#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */

	ty = 0;
     1ca:	f1 2c       	mov	r15, r1
     1cc:	6c c0       	rjmp	.+216    	; 0x2a6 <disk_initialize+0x156>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     1ce:	01 50       	subi	r16, 0x01	; 1
     1d0:	11 09       	sbc	r17, r1
     1d2:	19 f4       	brne	.+6      	; 0x1da <disk_initialize+0x8a>
     1d4:	5a c0       	rjmp	.+180    	; 0x28a <disk_initialize+0x13a>
     1d6:	00 ee       	ldi	r16, 0xE0	; 224
     1d8:	1e e2       	ldi	r17, 0x2E	; 46
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	70 e4       	ldi	r23, 0x40	; 64
     1e2:	89 ee       	ldi	r24, 0xE9	; 233
     1e4:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
     1e8:	81 11       	cpse	r24, r1
     1ea:	f1 cf       	rjmp	.-30     	; 0x1ce <disk_initialize+0x7e>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     1ec:	01 2b       	or	r16, r17
     1ee:	09 f4       	brne	.+2      	; 0x1f2 <disk_initialize+0xa2>
     1f0:	4e c0       	rjmp	.+156    	; 0x28e <disk_initialize+0x13e>
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	ba 01       	movw	r22, r20
     1f8:	8a e7       	ldi	r24, 0x7A	; 122
     1fa:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
     1fe:	81 11       	cpse	r24, r1
     200:	48 c0       	rjmp	.+144    	; 0x292 <disk_initialize+0x142>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
     202:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
     206:	f7 01       	movw	r30, r14
     208:	81 93       	st	Z+, r24
     20a:	7f 01       	movw	r14, r30
     20c:	ec 15       	cp	r30, r12
     20e:	fd 05       	cpc	r31, r13
     210:	c1 f7       	brne	.-16     	; 0x202 <disk_initialize+0xb2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	86 fd       	sbrc	r24, 6
     216:	3f c0       	rjmp	.+126    	; 0x296 <disk_initialize+0x146>
     218:	68 94       	set
     21a:	ff 24       	eor	r15, r15
     21c:	f2 f8       	bld	r15, 2
     21e:	43 c0       	rjmp	.+134    	; 0x2a6 <disk_initialize+0x156>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	ba 01       	movw	r22, r20
     226:	89 ee       	ldi	r24, 0xE9	; 233
     228:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	38 f0       	brcs	.+14     	; 0x23e <disk_initialize+0xee>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     230:	ff 24       	eor	r15, r15
     232:	f3 94       	inc	r15
     234:	0f 2e       	mov	r0, r31
     236:	f1 e4       	ldi	r31, 0x41	; 65
     238:	ef 2e       	mov	r14, r31
     23a:	f0 2d       	mov	r31, r0
     23c:	07 c0       	rjmp	.+14     	; 0x24c <disk_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     23e:	68 94       	set
     240:	ff 24       	eor	r15, r15
     242:	f1 f8       	bld	r15, 1
     244:	0f 2e       	mov	r0, r31
     246:	f9 ee       	ldi	r31, 0xE9	; 233
     248:	ef 2e       	mov	r14, r31
     24a:	f0 2d       	mov	r31, r0
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
     24c:	08 ea       	ldi	r16, 0xA8	; 168
     24e:	11 e6       	ldi	r17, 0x61	; 97
     250:	03 c0       	rjmp	.+6      	; 0x258 <disk_initialize+0x108>
     252:	01 50       	subi	r16, 0x01	; 1
     254:	11 09       	sbc	r17, r1
     256:	21 f1       	breq	.+72     	; 0x2a0 <disk_initialize+0x150>
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	ba 01       	movw	r22, r20
     25e:	8e 2d       	mov	r24, r14
     260:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
     264:	81 11       	cpse	r24, r1
     266:	f5 cf       	rjmp	.-22     	; 0x252 <disk_initialize+0x102>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
     268:	01 2b       	or	r16, r17
     26a:	e1 f0       	breq	.+56     	; 0x2a4 <disk_initialize+0x154>
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	52 e0       	ldi	r21, 0x02	; 2
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	80 e5       	ldi	r24, 0x50	; 80
     276:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
     27a:	88 23       	and	r24, r24
     27c:	a1 f0       	breq	.+40     	; 0x2a6 <disk_initialize+0x156>
				ty = 0;
     27e:	f1 2c       	mov	r15, r1
     280:	12 c0       	rjmp	.+36     	; 0x2a6 <disk_initialize+0x156>
//#if _WRITE_FUNC
//	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
//#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */

	ty = 0;
     282:	f1 2c       	mov	r15, r1
     284:	10 c0       	rjmp	.+32     	; 0x2a6 <disk_initialize+0x156>
     286:	f1 2c       	mov	r15, r1
     288:	0e c0       	rjmp	.+28     	; 0x2a6 <disk_initialize+0x156>
     28a:	f1 2c       	mov	r15, r1
     28c:	0c c0       	rjmp	.+24     	; 0x2a6 <disk_initialize+0x156>
     28e:	f1 2c       	mov	r15, r1
     290:	0a c0       	rjmp	.+20     	; 0x2a6 <disk_initialize+0x156>
     292:	f1 2c       	mov	r15, r1
     294:	08 c0       	rjmp	.+16     	; 0x2a6 <disk_initialize+0x156>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
     296:	0f 2e       	mov	r0, r31
     298:	fc e0       	ldi	r31, 0x0C	; 12
     29a:	ff 2e       	mov	r15, r31
     29c:	f0 2d       	mov	r31, r0
     29e:	03 c0       	rjmp	.+6      	; 0x2a6 <disk_initialize+0x156>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
     2a0:	f1 2c       	mov	r15, r1
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <disk_initialize+0x156>
     2a4:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
     2a6:	f0 92 5e 01 	sts	0x015E, r15
	release_spi();
     2aa:	0e 94 a4 00 	call	0x148	; 0x148 <release_spi>

	return ty ? 0 : STA_NOINIT;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	f1 10       	cpse	r15, r1
     2b2:	80 e0       	ldi	r24, 0x00	; 0
}
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	ef 90       	pop	r14
     2c8:	df 90       	pop	r13
     2ca:	cf 90       	pop	r12
     2cc:	08 95       	ret

000002ce <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
     2ce:	cf 92       	push	r12
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	7c 01       	movw	r14, r24
     2e0:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
     2e2:	80 91 5e 01 	lds	r24, 0x015E
     2e6:	83 fd       	sbrc	r24, 3
     2e8:	09 c0       	rjmp	.+18     	; 0x2fc <disk_readp+0x2e>
     2ea:	03 2e       	mov	r0, r19
     2ec:	39 e0       	ldi	r19, 0x09	; 9
     2ee:	44 0f       	add	r20, r20
     2f0:	55 1f       	adc	r21, r21
     2f2:	66 1f       	adc	r22, r22
     2f4:	77 1f       	adc	r23, r23
     2f6:	3a 95       	dec	r19
     2f8:	d1 f7       	brne	.-12     	; 0x2ee <disk_readp+0x20>
     2fa:	30 2d       	mov	r19, r0

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
     2fc:	81 e5       	ldi	r24, 0x51	; 81
     2fe:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
     302:	81 11       	cpse	r24, r1
     304:	34 c0       	rjmp	.+104    	; 0x36e <disk_readp+0xa0>
     306:	c0 e3       	ldi	r28, 0x30	; 48
     308:	d5 e7       	ldi	r29, 0x75	; 117

		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
     30a:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
		} while (rc == 0xFF && --bc);
     30e:	8f 3f       	cpi	r24, 0xFF	; 255
     310:	21 f4       	brne	.+8      	; 0x31a <disk_readp+0x4c>
     312:	21 97       	sbiw	r28, 0x01	; 1
     314:	d1 f7       	brne	.-12     	; 0x30a <disk_readp+0x3c>
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */

	res = RES_ERROR;
     316:	c1 e0       	ldi	r28, 0x01	; 1
     318:	2d c0       	rjmp	.+90     	; 0x374 <disk_readp+0xa6>
		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
     31a:	8e 3f       	cpi	r24, 0xFE	; 254
     31c:	51 f5       	brne	.+84     	; 0x372 <disk_readp+0xa4>
     31e:	c2 e0       	ldi	r28, 0x02	; 2
     320:	d2 e0       	ldi	r29, 0x02	; 2
     322:	c0 1b       	sub	r28, r16
     324:	d1 0b       	sbc	r29, r17
			bc = 514 - ofs - cnt;
     326:	cc 19       	sub	r28, r12
     328:	dd 09       	sbc	r29, r13

			/* Skip leading bytes */
			if (ofs) {
     32a:	c1 14       	cp	r12, r1
     32c:	d1 04       	cpc	r13, r1
     32e:	31 f0       	breq	.+12     	; 0x33c <disk_readp+0x6e>
				do rcv_spi(); while (--ofs);
     330:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	c8 1a       	sub	r12, r24
     338:	d1 08       	sbc	r13, r1
     33a:	d1 f7       	brne	.-12     	; 0x330 <disk_readp+0x62>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
     33c:	e1 14       	cp	r14, r1
     33e:	f1 04       	cpc	r15, r1
     340:	49 f0       	breq	.+18     	; 0x354 <disk_readp+0x86>
				do
					*buff++ = rcv_spi();
     342:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
     346:	f7 01       	movw	r30, r14
     348:	81 93       	st	Z+, r24
     34a:	7f 01       	movw	r14, r30
				while (--cnt);
     34c:	01 50       	subi	r16, 0x01	; 1
     34e:	11 09       	sbc	r17, r1
     350:	c1 f7       	brne	.-16     	; 0x342 <disk_readp+0x74>
     352:	07 c0       	rjmp	.+14     	; 0x362 <disk_readp+0x94>
			} else {	/* Forward data to the outgoing stream (depends on the project) */
			do
				transmitByte(rcv_spi());	/* (Console output) */
     354:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
     358:	0e 94 69 07 	call	0xed2	; 0xed2 <transmitByte>
				while (--cnt);
     35c:	01 50       	subi	r16, 0x01	; 1
     35e:	11 09       	sbc	r17, r1
     360:	c9 f7       	brne	.-14     	; 0x354 <disk_readp+0x86>
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
     362:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
     366:	21 97       	sbiw	r28, 0x01	; 1
     368:	e1 f7       	brne	.-8      	; 0x362 <disk_readp+0x94>

			res = RES_OK;
     36a:	c0 e0       	ldi	r28, 0x00	; 0
     36c:	03 c0       	rjmp	.+6      	; 0x374 <disk_readp+0xa6>
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */

	res = RES_ERROR;
     36e:	c1 e0       	ldi	r28, 0x01	; 1
     370:	01 c0       	rjmp	.+2      	; 0x374 <disk_readp+0xa6>
     372:	c1 e0       	ldi	r28, 0x01	; 1

			res = RES_OK;
		}
	}

	release_spi();
     374:	0e 94 a4 00 	call	0x148	; 0x148 <release_spi>

	return res;
}
     378:	8c 2f       	mov	r24, r28
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	08 95       	ret

0000038c <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
	static WORD wc;


	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
     398:	00 97       	sbiw	r24, 0x00	; 0
     39a:	f1 f0       	breq	.+60     	; 0x3d8 <disk_writep+0x4c>
		bc = (WORD)sa;
     39c:	8a 01       	movw	r16, r20
		while (bc && wc) {		/* Send data bytes to the card */
     39e:	45 2b       	or	r20, r21
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <disk_writep+0x18>
     3a2:	6a c0       	rjmp	.+212    	; 0x478 <disk_writep+0xec>
     3a4:	c0 91 5c 01 	lds	r28, 0x015C
     3a8:	d0 91 5d 01 	lds	r29, 0x015D
     3ac:	20 97       	sbiw	r28, 0x00	; 0
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <disk_writep+0x26>
     3b0:	65 c0       	rjmp	.+202    	; 0x47c <disk_writep+0xf0>
     3b2:	7c 01       	movw	r14, r24
			xmit_spi(*buff++);
     3b4:	f7 01       	movw	r30, r14
     3b6:	81 91       	ld	r24, Z+
     3b8:	7f 01       	movw	r14, r30
     3ba:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
			wc--; bc--;
     3be:	21 97       	sbiw	r28, 0x01	; 1
     3c0:	d0 93 5d 01 	sts	0x015D, r29
     3c4:	c0 93 5c 01 	sts	0x015C, r28
     3c8:	01 50       	subi	r16, 0x01	; 1
     3ca:	11 09       	sbc	r17, r1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <disk_writep+0x44>
     3ce:	58 c0       	rjmp	.+176    	; 0x480 <disk_writep+0xf4>
     3d0:	20 97       	sbiw	r28, 0x00	; 0
     3d2:	81 f7       	brne	.-32     	; 0x3b4 <disk_writep+0x28>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     3d4:	c0 e0       	ldi	r28, 0x00	; 0
     3d6:	57 c0       	rjmp	.+174    	; 0x486 <disk_writep+0xfa>
	} else {
		if (sa) {	/* Initiate sector write process */
     3d8:	41 15       	cp	r20, r1
     3da:	51 05       	cpc	r21, r1
     3dc:	61 05       	cpc	r22, r1
     3de:	71 05       	cpc	r23, r1
     3e0:	01 f1       	breq	.+64     	; 0x422 <disk_writep+0x96>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
     3e2:	80 91 5e 01 	lds	r24, 0x015E
     3e6:	83 fd       	sbrc	r24, 3
     3e8:	09 c0       	rjmp	.+18     	; 0x3fc <disk_writep+0x70>
     3ea:	03 2e       	mov	r0, r19
     3ec:	39 e0       	ldi	r19, 0x09	; 9
     3ee:	44 0f       	add	r20, r20
     3f0:	55 1f       	adc	r21, r21
     3f2:	66 1f       	adc	r22, r22
     3f4:	77 1f       	adc	r23, r23
     3f6:	3a 95       	dec	r19
     3f8:	d1 f7       	brne	.-12     	; 0x3ee <disk_writep+0x62>
     3fa:	30 2d       	mov	r19, r0
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
     3fc:	88 e5       	ldi	r24, 0x58	; 88
     3fe:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
     402:	81 11       	cpse	r24, r1
     404:	3f c0       	rjmp	.+126    	; 0x484 <disk_writep+0xf8>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
     406:	8f ef       	ldi	r24, 0xFF	; 255
     408:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
     40c:	8e ef       	ldi	r24, 0xFE	; 254
     40e:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
				wc = 512;							/* Set byte counter */
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	90 93 5d 01 	sts	0x015D, r25
     41a:	80 93 5c 01 	sts	0x015C, r24
				res = RES_OK;
     41e:	c0 e0       	ldi	r28, 0x00	; 0
     420:	32 c0       	rjmp	.+100    	; 0x486 <disk_writep+0xfa>
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
     422:	c0 91 5c 01 	lds	r28, 0x015C
     426:	d0 91 5d 01 	lds	r29, 0x015D
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
     42a:	ce 3f       	cpi	r28, 0xFE	; 254
     42c:	ff ef       	ldi	r31, 0xFF	; 255
     42e:	df 07       	cpc	r29, r31
     430:	11 f4       	brne	.+4      	; 0x436 <disk_writep+0xaa>
     432:	08 c0       	rjmp	.+16     	; 0x444 <disk_writep+0xb8>
     434:	ec 01       	movw	r28, r24
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
     43c:	ce 01       	movw	r24, r28
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	21 96       	adiw	r28, 0x01	; 1
     442:	c1 f7       	brne	.-16     	; 0x434 <disk_writep+0xa8>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
     444:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
     448:	8f 71       	andi	r24, 0x1F	; 31
     44a:	85 30       	cpi	r24, 0x05	; 5
     44c:	29 f0       	breq	.+10     	; 0x458 <disk_writep+0xcc>
	DRESULT res;
	WORD bc;
	static WORD wc;


	res = RES_ERROR;
     44e:	c1 e0       	ldi	r28, 0x01	; 1
     450:	10 c0       	rjmp	.+32     	; 0x472 <disk_writep+0xe6>
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	/* Wait ready */
     452:	01 50       	subi	r16, 0x01	; 1
     454:	11 09       	sbc	r17, r1
     456:	02 c0       	rjmp	.+4      	; 0x45c <disk_writep+0xd0>
     458:	08 ee       	ldi	r16, 0xE8	; 232
     45a:	1d ef       	ldi	r17, 0xFD	; 253
     45c:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
     460:	8f 3f       	cpi	r24, 0xFF	; 255
     462:	19 f0       	breq	.+6      	; 0x46a <disk_writep+0xde>
     464:	01 15       	cp	r16, r1
     466:	11 05       	cpc	r17, r1
     468:	a1 f7       	brne	.-24     	; 0x452 <disk_writep+0xc6>
				if (bc) res = RES_OK;
     46a:	c1 e0       	ldi	r28, 0x01	; 1
     46c:	01 2b       	or	r16, r17
     46e:	09 f0       	breq	.+2      	; 0x472 <disk_writep+0xe6>
     470:	c0 e0       	ldi	r28, 0x00	; 0
			}
			release_spi();
     472:	0e 94 a4 00 	call	0x148	; 0x148 <release_spi>
     476:	07 c0       	rjmp	.+14     	; 0x486 <disk_writep+0xfa>
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     478:	c0 e0       	ldi	r28, 0x00	; 0
     47a:	05 c0       	rjmp	.+10     	; 0x486 <disk_writep+0xfa>
     47c:	c0 e0       	ldi	r28, 0x00	; 0
     47e:	03 c0       	rjmp	.+6      	; 0x486 <disk_writep+0xfa>
     480:	c0 e0       	ldi	r28, 0x00	; 0
     482:	01 c0       	rjmp	.+2      	; 0x486 <disk_writep+0xfa>
	DRESULT res;
	WORD bc;
	static WORD wc;


	res = RES_ERROR;
     484:	c1 e0       	ldi	r28, 0x01	; 1
			release_spi();
		}
	}

	return res;
}
     486:	8c 2f       	mov	r24, r28
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	08 95       	ret

00000496 <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
	FATFS *fs = FatFs;
     49a:	e0 91 5f 01 	lds	r30, 0x015F
     49e:	f0 91 60 01 	lds	r31, 0x0160


	clst -= 2;
     4a2:	9c 01       	movw	r18, r24
     4a4:	22 50       	subi	r18, 0x02	; 2
     4a6:	31 09       	sbc	r19, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     4a8:	46 81       	ldd	r20, Z+6	; 0x06
     4aa:	57 81       	ldd	r21, Z+7	; 0x07
     4ac:	42 50       	subi	r20, 0x02	; 2
     4ae:	51 09       	sbc	r21, r1
     4b0:	24 17       	cp	r18, r20
     4b2:	35 07       	cpc	r19, r21
     4b4:	68 f4       	brcc	.+26     	; 0x4d0 <clust2sect+0x3a>
	return (DWORD)clst * fs->csize + fs->database;
     4b6:	a2 81       	ldd	r26, Z+2	; 0x02
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	0e 94 48 08 	call	0x1090	; 0x1090 <__umulhisi3>
     4be:	00 89       	ldd	r16, Z+16	; 0x10
     4c0:	11 89       	ldd	r17, Z+17	; 0x11
     4c2:	22 89       	ldd	r18, Z+18	; 0x12
     4c4:	33 89       	ldd	r19, Z+19	; 0x13
     4c6:	60 0f       	add	r22, r16
     4c8:	71 1f       	adc	r23, r17
     4ca:	82 1f       	adc	r24, r18
     4cc:	93 1f       	adc	r25, r19
     4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <clust2sect+0x40>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	08 95       	ret

000004dc <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	fc 01       	movw	r30, r24
	CLUST clst;
	FATFS *fs = FatFs;
     4e2:	a0 91 5f 01 	lds	r26, 0x015F
     4e6:	b0 91 60 01 	lds	r27, 0x0160


	dj->index = 0;
     4ea:	11 82       	std	Z+1, r1	; 0x01
     4ec:	10 82       	st	Z, r1
	clst = dj->sclust;
     4ee:	84 81       	ldd	r24, Z+4	; 0x04
     4f0:	95 81       	ldd	r25, Z+5	; 0x05
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
     4f2:	81 30       	cpi	r24, 0x01	; 1
     4f4:	91 05       	cpc	r25, r1
     4f6:	d9 f0       	breq	.+54     	; 0x52e <dir_rewind+0x52>
     4f8:	16 96       	adiw	r26, 0x06	; 6
     4fa:	2d 91       	ld	r18, X+
     4fc:	3c 91       	ld	r19, X
     4fe:	17 97       	sbiw	r26, 0x07	; 7
     500:	82 17       	cp	r24, r18
     502:	93 07       	cpc	r25, r19
     504:	b0 f4       	brcc	.+44     	; 0x532 <dir_rewind+0x56>
     506:	ef 01       	movw	r28, r30
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32))	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
     508:	97 83       	std	Z+7, r25	; 0x07
     50a:	86 83       	std	Z+6, r24	; 0x06
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     50c:	00 97       	sbiw	r24, 0x00	; 0
     50e:	19 f0       	breq	.+6      	; 0x516 <dir_rewind+0x3a>
     510:	0e 94 4b 02 	call	0x496	; 0x496 <clust2sect>
     514:	06 c0       	rjmp	.+12     	; 0x522 <dir_rewind+0x46>
     516:	1c 96       	adiw	r26, 0x0c	; 12
     518:	6d 91       	ld	r22, X+
     51a:	7d 91       	ld	r23, X+
     51c:	8d 91       	ld	r24, X+
     51e:	9c 91       	ld	r25, X
     520:	1f 97       	sbiw	r26, 0x0f	; 15
     522:	68 87       	std	Y+8, r22	; 0x08
     524:	79 87       	std	Y+9, r23	; 0x09
     526:	8a 87       	std	Y+10, r24	; 0x0a
     528:	9b 87       	std	Y+11, r25	; 0x0b

	return FR_OK;	/* Seek succeeded */
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	03 c0       	rjmp	.+6      	; 0x534 <dir_rewind+0x58>


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	01 c0       	rjmp	.+2      	; 0x534 <dir_rewind+0x58>
     532:	81 e0       	ldi	r24, 0x01	; 1
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     53a:	cf 92       	push	r12
     53c:	df 92       	push	r13
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	ec 01       	movw	r28, r24
     54c:	6a 01       	movw	r12, r20
     54e:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
     550:	02 e0       	ldi	r16, 0x02	; 2
     552:	10 e0       	ldi	r17, 0x00	; 0
     554:	2e ef       	ldi	r18, 0xFE	; 254
     556:	31 e0       	ldi	r19, 0x01	; 1
     558:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
     55c:	81 11       	cpse	r24, r1
     55e:	1e c0       	rjmp	.+60     	; 0x59c <check_fs+0x62>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	98 2f       	mov	r25, r24
     566:	88 27       	eor	r24, r24
     568:	28 81       	ld	r18, Y
     56a:	82 2b       	or	r24, r18
     56c:	85 35       	cpi	r24, 0x55	; 85
     56e:	9a 4a       	sbci	r25, 0xAA	; 170
     570:	b9 f4       	brne	.+46     	; 0x5a0 <check_fs+0x66>
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
     572:	26 e3       	ldi	r18, 0x36	; 54
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	b7 01       	movw	r22, r14
     578:	a6 01       	movw	r20, r12
     57a:	ce 01       	movw	r24, r28
     57c:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
     580:	81 11       	cpse	r24, r1
     582:	10 c0       	rjmp	.+32     	; 0x5a4 <check_fs+0x6a>
     584:	29 81       	ldd	r18, Y+1	; 0x01
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	32 2f       	mov	r19, r18
     58a:	22 27       	eor	r18, r18
     58c:	88 81       	ld	r24, Y
     58e:	28 2b       	or	r18, r24
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	26 34       	cpi	r18, 0x46	; 70
     594:	31 44       	sbci	r19, 0x41	; 65
     596:	39 f4       	brne	.+14     	; 0x5a6 <check_fs+0x6c>
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	05 c0       	rjmp	.+10     	; 0x5a6 <check_fs+0x6c>
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
		return 3;
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	03 c0       	rjmp	.+6      	; 0x5a6 <check_fs+0x6c>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <check_fs+0x6c>

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	08 95       	ret

000005b8 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <get_fat+0xa>
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <get_fat+0xc>
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
	BYTE buf[4];
	FATFS *fs = FatFs;
     5c8:	e0 91 5f 01 	lds	r30, 0x015F
     5cc:	f0 91 60 01 	lds	r31, 0x0160

	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
     5d0:	82 30       	cpi	r24, 0x02	; 2
     5d2:	91 05       	cpc	r25, r1
     5d4:	28 f1       	brcs	.+74     	; 0x620 <get_fat+0x68>
     5d6:	26 81       	ldd	r18, Z+6	; 0x06
     5d8:	37 81       	ldd	r19, Z+7	; 0x07
     5da:	82 17       	cp	r24, r18
     5dc:	93 07       	cpc	r25, r19
     5de:	18 f5       	brcc	.+70     	; 0x626 <get_fat+0x6e>
		return 1;

	switch (fs->fs_type) {
     5e0:	20 81       	ld	r18, Z
     5e2:	22 30       	cpi	r18, 0x02	; 2
     5e4:	19 f5       	brne	.+70     	; 0x62c <get_fat+0x74>
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
	}
#endif
#if _FS_FAT16
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
     5e6:	9c 01       	movw	r18, r24
     5e8:	33 27       	eor	r19, r19
     5ea:	22 0f       	add	r18, r18
     5ec:	33 1f       	adc	r19, r19
     5ee:	89 2f       	mov	r24, r25
     5f0:	99 27       	eor	r25, r25
     5f2:	40 85       	ldd	r20, Z+8	; 0x08
     5f4:	51 85       	ldd	r21, Z+9	; 0x09
     5f6:	62 85       	ldd	r22, Z+10	; 0x0a
     5f8:	73 85       	ldd	r23, Z+11	; 0x0b
     5fa:	48 0f       	add	r20, r24
     5fc:	59 1f       	adc	r21, r25
     5fe:	61 1d       	adc	r22, r1
     600:	71 1d       	adc	r23, r1
     602:	02 e0       	ldi	r16, 0x02	; 2
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
     60e:	81 11       	cpse	r24, r1
     610:	10 c0       	rjmp	.+32     	; 0x632 <get_fat+0x7a>
		return LD_WORD(buf);
     612:	8a 81       	ldd	r24, Y+2	; 0x02
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	98 2f       	mov	r25, r24
     618:	88 27       	eor	r24, r24
     61a:	29 81       	ldd	r18, Y+1	; 0x01
     61c:	82 2b       	or	r24, r18
     61e:	0b c0       	rjmp	.+22     	; 0x636 <get_fat+0x7e>
{
	BYTE buf[4];
	FATFS *fs = FatFs;

	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
		return 1;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	08 c0       	rjmp	.+16     	; 0x636 <get_fat+0x7e>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	05 c0       	rjmp	.+10     	; 0x636 <get_fat+0x7e>
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <get_fat+0x7e>
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
}
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	08 95       	ret

00000648 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object */
)
{
     648:	4f 92       	push	r4
     64a:	5f 92       	push	r5
     64c:	6f 92       	push	r6
     64e:	7f 92       	push	r7
     650:	8f 92       	push	r8
     652:	9f 92       	push	r9
     654:	af 92       	push	r10
     656:	bf 92       	push	r11
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	a8 97       	sbiw	r28, 0x28	; 40
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	7c 01       	movw	r14, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
     676:	10 92 60 01 	sts	0x0160, r1
     67a:	10 92 5f 01 	sts	0x015F, r1

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
     67e:	0e 94 a8 00 	call	0x150	; 0x150 <disk_initialize>
     682:	80 fd       	sbrc	r24, 0
     684:	f5 c0       	rjmp	.+490    	; 0x870 <pf_mount+0x228>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	ba 01       	movw	r22, r20
     68c:	ce 01       	movw	r24, r28
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	0e 94 9d 02 	call	0x53a	; 0x53a <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	89 f5       	brne	.+98     	; 0x6fa <pf_mount+0xb2>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
     698:	00 e1       	ldi	r16, 0x10	; 16
     69a:	10 e0       	ldi	r17, 0x00	; 0
     69c:	2e eb       	ldi	r18, 0xBE	; 190
     69e:	31 e0       	ldi	r19, 0x01	; 1
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	ba 01       	movw	r22, r20
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
     6ae:	81 11       	cpse	r24, r1
     6b0:	e1 c0       	rjmp	.+450    	; 0x874 <pf_mount+0x22c>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
     6b2:	8d 81       	ldd	r24, Y+5	; 0x05
     6b4:	88 23       	and	r24, r24
     6b6:	09 f4       	brne	.+2      	; 0x6ba <pf_mount+0x72>
     6b8:	df c0       	rjmp	.+446    	; 0x878 <pf_mount+0x230>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
     6ba:	8c 85       	ldd	r24, Y+12	; 0x0c
     6bc:	8b 84       	ldd	r8, Y+11	; 0x0b
     6be:	91 2c       	mov	r9, r1
     6c0:	a1 2c       	mov	r10, r1
     6c2:	b1 2c       	mov	r11, r1
     6c4:	54 01       	movw	r10, r8
     6c6:	99 24       	eor	r9, r9
     6c8:	88 24       	eor	r8, r8
     6ca:	b8 2a       	or	r11, r24
     6cc:	89 85       	ldd	r24, Y+9	; 0x09
     6ce:	a5 01       	movw	r20, r10
     6d0:	94 01       	movw	r18, r8
     6d2:	28 2b       	or	r18, r24
     6d4:	da 01       	movw	r26, r20
     6d6:	c9 01       	movw	r24, r18
     6d8:	8a 84       	ldd	r8, Y+10	; 0x0a
     6da:	91 2c       	mov	r9, r1
     6dc:	98 2c       	mov	r9, r8
     6de:	88 24       	eor	r8, r8
     6e0:	a1 2c       	mov	r10, r1
     6e2:	b1 2c       	mov	r11, r1
     6e4:	88 2a       	or	r8, r24
     6e6:	99 2a       	or	r9, r25
     6e8:	aa 2a       	or	r10, r26
     6ea:	bb 2a       	or	r11, r27
				fmt = check_fs(buf, bsect);	/* Check the partition */
     6ec:	b5 01       	movw	r22, r10
     6ee:	a4 01       	movw	r20, r8
     6f0:	ce 01       	movw	r24, r28
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	0e 94 9d 02 	call	0x53a	; 0x53a <check_fs>
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <pf_mount+0xb8>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
     6fa:	81 2c       	mov	r8, r1
     6fc:	91 2c       	mov	r9, r1
     6fe:	54 01       	movw	r10, r8
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     700:	83 30       	cpi	r24, 0x03	; 3
     702:	09 f4       	brne	.+2      	; 0x706 <pf_mount+0xbe>
     704:	bb c0       	rjmp	.+374    	; 0x87c <pf_mount+0x234>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
     706:	81 11       	cpse	r24, r1
     708:	bb c0       	rjmp	.+374    	; 0x880 <pf_mount+0x238>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
     70a:	04 e2       	ldi	r16, 0x24	; 36
     70c:	10 e0       	ldi	r17, 0x00	; 0
     70e:	2d e0       	ldi	r18, 0x0D	; 13
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	b5 01       	movw	r22, r10
     714:	a4 01       	movw	r20, r8
     716:	ce 01       	movw	r24, r28
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
     71e:	81 11       	cpse	r24, r1
     720:	b1 c0       	rjmp	.+354    	; 0x884 <pf_mount+0x23c>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
     722:	2b 85       	ldd	r18, Y+11	; 0x0b
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	32 2f       	mov	r19, r18
     728:	22 27       	eor	r18, r18
     72a:	8a 85       	ldd	r24, Y+10	; 0x0a
     72c:	28 2b       	or	r18, r24
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
     732:	21 15       	cp	r18, r1
     734:	31 05       	cpc	r19, r1
     736:	41 05       	cpc	r20, r1
     738:	51 05       	cpc	r21, r1
     73a:	c1 f4       	brne	.+48     	; 0x76c <pf_mount+0x124>
     73c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     73e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     740:	42 2f       	mov	r20, r18
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	ba 01       	movw	r22, r20
     74a:	55 27       	eor	r21, r21
     74c:	44 27       	eor	r20, r20
     74e:	78 2b       	or	r23, r24
     750:	88 8d       	ldd	r24, Y+24	; 0x18
     752:	48 2b       	or	r20, r24
     754:	89 8d       	ldd	r24, Y+25	; 0x19
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	98 2f       	mov	r25, r24
     75a:	88 27       	eor	r24, r24
     75c:	a0 e0       	ldi	r26, 0x00	; 0
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	9a 01       	movw	r18, r20
     762:	ab 01       	movw	r20, r22
     764:	28 2b       	or	r18, r24
     766:	39 2b       	or	r19, r25
     768:	4a 2b       	or	r20, r26
     76a:	5b 2b       	or	r21, r27

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
     76c:	ac 81       	ldd	r26, Y+4	; 0x04
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	0e 94 57 08 	call	0x10ae	; 0x10ae <__muluhisi3>
     774:	6d a3       	std	Y+37, r22	; 0x25
     776:	7e a3       	std	Y+38, r23	; 0x26
     778:	8f a3       	std	Y+39, r24	; 0x27
     77a:	98 a7       	std	Y+40, r25	; 0x28
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
     77c:	8b 81       	ldd	r24, Y+3	; 0x03
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	98 2f       	mov	r25, r24
     782:	88 27       	eor	r24, r24
     784:	2a 81       	ldd	r18, Y+2	; 0x02
     786:	82 2b       	or	r24, r18
     788:	ac 01       	movw	r20, r24
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	84 0e       	add	r8, r20
     790:	95 1e       	adc	r9, r21
     792:	a6 1e       	adc	r10, r22
     794:	b7 1e       	adc	r11, r23
     796:	d7 01       	movw	r26, r14
     798:	18 96       	adiw	r26, 0x08	; 8
     79a:	8d 92       	st	X+, r8
     79c:	9d 92       	st	X+, r9
     79e:	ad 92       	st	X+, r10
     7a0:	bc 92       	st	X, r11
     7a2:	1b 97       	sbiw	r26, 0x0b	; 11
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
     7a4:	19 81       	ldd	r17, Y+1	; 0x01
     7a6:	12 96       	adiw	r26, 0x02	; 2
     7a8:	1c 93       	st	X, r17
     7aa:	12 97       	sbiw	r26, 0x02	; 2
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
     7ac:	ee 81       	ldd	r30, Y+6	; 0x06
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	fe 2f       	mov	r31, r30
     7b2:	ee 27       	eor	r30, r30
     7b4:	8d 81       	ldd	r24, Y+5	; 0x05
     7b6:	e8 2b       	or	r30, r24
     7b8:	15 96       	adiw	r26, 0x05	; 5
     7ba:	fc 93       	st	X, r31
     7bc:	ee 93       	st	-X, r30
     7be:	14 97       	sbiw	r26, 0x04	; 4
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
     7c0:	88 85       	ldd	r24, Y+8	; 0x08
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	98 2f       	mov	r25, r24
     7c6:	88 27       	eor	r24, r24
     7c8:	2f 81       	ldd	r18, Y+7	; 0x07
     7ca:	82 2b       	or	r24, r18
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
     7d0:	00 97       	sbiw	r24, 0x00	; 0
     7d2:	a1 05       	cpc	r26, r1
     7d4:	b1 05       	cpc	r27, r1
     7d6:	b1 f4       	brne	.+44     	; 0x804 <pf_mount+0x1bc>
     7d8:	2f 89       	ldd	r18, Y+23	; 0x17
     7da:	8e 89       	ldd	r24, Y+22	; 0x16
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	a0 e0       	ldi	r26, 0x00	; 0
     7e0:	b0 e0       	ldi	r27, 0x00	; 0
     7e2:	dc 01       	movw	r26, r24
     7e4:	99 27       	eor	r25, r25
     7e6:	88 27       	eor	r24, r24
     7e8:	b2 2b       	or	r27, r18
     7ea:	2c 89       	ldd	r18, Y+20	; 0x14
     7ec:	82 2b       	or	r24, r18
     7ee:	2d 89       	ldd	r18, Y+21	; 0x15
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	32 2f       	mov	r19, r18
     7f4:	22 27       	eor	r18, r18
     7f6:	29 01       	movw	r4, r18
     7f8:	61 2c       	mov	r6, r1
     7fa:	71 2c       	mov	r7, r1
     7fc:	84 29       	or	r24, r4
     7fe:	95 29       	or	r25, r5
     800:	a6 29       	or	r26, r6
     802:	b7 29       	or	r27, r7
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
     804:	f2 95       	swap	r31
     806:	e2 95       	swap	r30
     808:	ef 70       	andi	r30, 0x0F	; 15
     80a:	ef 27       	eor	r30, r31
     80c:	ff 70       	andi	r31, 0x0F	; 15
     80e:	ef 27       	eor	r30, r31
     810:	2f 01       	movw	r4, r30
     812:	61 2c       	mov	r6, r1
     814:	71 2c       	mov	r7, r1
     816:	84 1b       	sub	r24, r20
     818:	95 0b       	sbc	r25, r21
     81a:	a6 0b       	sbc	r26, r22
     81c:	b7 0b       	sbc	r27, r23
     81e:	2d a1       	ldd	r18, Y+37	; 0x25
     820:	3e a1       	ldd	r19, Y+38	; 0x26
     822:	4f a1       	ldd	r20, Y+39	; 0x27
     824:	58 a5       	ldd	r21, Y+40	; 0x28
     826:	82 1b       	sub	r24, r18
     828:	93 0b       	sbc	r25, r19
     82a:	a4 0b       	sbc	r26, r20
     82c:	b5 0b       	sbc	r27, r21
     82e:	bc 01       	movw	r22, r24
     830:	cd 01       	movw	r24, r26
     832:	64 19       	sub	r22, r4
     834:	75 09       	sbc	r23, r5
     836:	86 09       	sbc	r24, r6
     838:	97 09       	sbc	r25, r7
		) / fs->csize + 2;
     83a:	21 2f       	mov	r18, r17
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	0e 94 26 08 	call	0x104c	; 0x104c <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
     846:	da 01       	movw	r26, r20
     848:	c9 01       	movw	r24, r18
     84a:	02 96       	adiw	r24, 0x02	; 2
     84c:	a1 1d       	adc	r26, r1
     84e:	b1 1d       	adc	r27, r1
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
     850:	f7 01       	movw	r30, r14
     852:	97 83       	std	Z+7, r25	; 0x07
     854:	86 83       	std	Z+6, r24	; 0x06

	fmt = 0;							/* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
     856:	da 01       	movw	r26, r20
     858:	c9 01       	movw	r24, r18
     85a:	86 5f       	subi	r24, 0xF6	; 246
     85c:	9f 40       	sbci	r25, 0x0F	; 15
     85e:	a1 09       	sbc	r26, r1
     860:	b1 09       	sbc	r27, r1
     862:	8f 3f       	cpi	r24, 0xFF	; 255
     864:	9f 4e       	sbci	r25, 0xEF	; 239
     866:	a1 05       	cpc	r26, r1
     868:	b1 05       	cpc	r27, r1
     86a:	70 f0       	brcs	.+28     	; 0x888 <pf_mount+0x240>
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
		fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
     86c:	86 e0       	ldi	r24, 0x06	; 6
     86e:	2c c0       	rjmp	.+88     	; 0x8c8 <pf_mount+0x280>


	FatFs = 0;

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
     870:	82 e0       	ldi	r24, 0x02	; 2
     872:	2a c0       	rjmp	.+84     	; 0x8c8 <pf_mount+0x280>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	28 c0       	rjmp	.+80     	; 0x8c8 <pf_mount+0x280>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
     878:	86 e0       	ldi	r24, 0x06	; 6
     87a:	26 c0       	rjmp	.+76     	; 0x8c8 <pf_mount+0x280>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	24 c0       	rjmp	.+72     	; 0x8c8 <pf_mount+0x280>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
     880:	86 e0       	ldi	r24, 0x06	; 6
     882:	22 c0       	rjmp	.+68     	; 0x8c8 <pf_mount+0x280>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	20 c0       	rjmp	.+64     	; 0x8c8 <pf_mount+0x280>
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
		fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
	fs->fs_type = fmt;
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	d7 01       	movw	r26, r14
     88c:	8c 93       	st	X, r24

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
     88e:	2d a1       	ldd	r18, Y+37	; 0x25
     890:	3e a1       	ldd	r19, Y+38	; 0x26
     892:	4f a1       	ldd	r20, Y+39	; 0x27
     894:	58 a5       	ldd	r21, Y+40	; 0x28
     896:	82 0e       	add	r8, r18
     898:	93 1e       	adc	r9, r19
     89a:	a4 1e       	adc	r10, r20
     89c:	b5 1e       	adc	r11, r21
     89e:	1c 96       	adiw	r26, 0x0c	; 12
     8a0:	8d 92       	st	X+, r8
     8a2:	9d 92       	st	X+, r9
     8a4:	ad 92       	st	X+, r10
     8a6:	bc 92       	st	X, r11
     8a8:	1f 97       	sbiw	r26, 0x0f	; 15
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
     8aa:	84 0c       	add	r8, r4
     8ac:	95 1c       	adc	r9, r5
     8ae:	a6 1c       	adc	r10, r6
     8b0:	b7 1c       	adc	r11, r7
     8b2:	f7 01       	movw	r30, r14
     8b4:	80 8a       	std	Z+16, r8	; 0x10
     8b6:	91 8a       	std	Z+17, r9	; 0x11
     8b8:	a2 8a       	std	Z+18, r10	; 0x12
     8ba:	b3 8a       	std	Z+19, r11	; 0x13

	fs->flag = 0;
     8bc:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
     8be:	f0 92 60 01 	sts	0x0160, r15
     8c2:	e0 92 5f 01 	sts	0x015F, r14

	return FR_OK;
     8c6:	80 e0       	ldi	r24, 0x00	; 0
}
     8c8:	a8 96       	adiw	r28, 0x28	; 40
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	9f 90       	pop	r9
     8e6:	8f 90       	pop	r8
     8e8:	7f 90       	pop	r7
     8ea:	6f 90       	pop	r6
     8ec:	5f 90       	pop	r5
     8ee:	4f 90       	pop	r4
     8f0:	08 95       	ret

000008f2 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
     8f2:	2f 92       	push	r2
     8f4:	3f 92       	push	r3
     8f6:	4f 92       	push	r4
     8f8:	5f 92       	push	r5
     8fa:	6f 92       	push	r6
     8fc:	7f 92       	push	r7
     8fe:	8f 92       	push	r8
     900:	9f 92       	push	r9
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	e8 97       	sbiw	r28, 0x38	; 56
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	6c 01       	movw	r12, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     928:	a0 90 5f 01 	lds	r10, 0x015F
     92c:	b0 90 60 01 	lds	r11, 0x0160


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     930:	a1 14       	cp	r10, r1
     932:	b1 04       	cpc	r11, r1
     934:	09 f4       	brne	.+2      	; 0x938 <__stack+0x39>
     936:	2f c1       	rjmp	.+606    	; 0xb96 <__stack+0x297>

	fs->flag = 0;
     938:	f5 01       	movw	r30, r10
     93a:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
     93c:	ce 01       	movw	r24, r28
     93e:	0d 96       	adiw	r24, 0x0d	; 13
     940:	9c 83       	std	Y+4, r25	; 0x04
     942:	8b 83       	std	Y+3, r24	; 0x03
)
{
	FRESULT res;


	while (*path == ' ') path++;		/* Strip leading spaces */
     944:	f6 01       	movw	r30, r12
     946:	80 81       	ld	r24, Z
     948:	80 32       	cpi	r24, 0x20	; 32
     94a:	29 f4       	brne	.+10     	; 0x956 <__stack+0x57>
     94c:	31 96       	adiw	r30, 0x01	; 1
     94e:	6f 01       	movw	r12, r30
     950:	81 91       	ld	r24, Z+
     952:	80 32       	cpi	r24, 0x20	; 32
     954:	e1 f3       	breq	.-8      	; 0x94e <__stack+0x4f>
	if (*path == '/') path++;			/* Strip heading separator if exist */
     956:	8f 32       	cpi	r24, 0x2F	; 47
     958:	19 f4       	brne	.+6      	; 0x960 <__stack+0x61>
     95a:	ff ef       	ldi	r31, 0xFF	; 255
     95c:	cf 1a       	sub	r12, r31
     95e:	df 0a       	sbc	r13, r31
	dj->sclust = 0;						/* Set start directory (always root dir) */
     960:	1e 82       	std	Y+6, r1	; 0x06
     962:	1d 82       	std	Y+5, r1	; 0x05

	if ((BYTE)*path < ' ') {			/* Null path means the root directory */
     964:	f6 01       	movw	r30, r12
     966:	80 81       	ld	r24, Z
     968:	80 32       	cpi	r24, 0x20	; 32
     96a:	38 f4       	brcc	.+14     	; 0x97a <__stack+0x7b>
		res = dir_rewind(dj);
     96c:	ce 01       	movw	r24, r28
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	0e 94 6e 02 	call	0x4dc	; 0x4dc <dir_rewind>
     974:	98 2f       	mov	r25, r24
		dir[0] = 0;
     976:	19 8e       	std	Y+25, r1	; 0x19
     978:	da c0       	rjmp	.+436    	; 0xb2e <__stack+0x22f>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     97a:	68 94       	set
     97c:	ff 24       	eor	r15, r15
     97e:	f5 f8       	bld	r15, 5
     980:	61 2c       	mov	r6, r1
     982:	68 94       	set
     984:	44 24       	eor	r4, r4
     986:	43 f8       	bld	r4, 3
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
     988:	34 2c       	mov	r3, r4
     98a:	0f 2e       	mov	r0, r31
     98c:	fb e0       	ldi	r31, 0x0B	; 11
     98e:	2f 2e       	mov	r2, r31
     990:	f0 2d       	mov	r31, r0
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     992:	55 24       	eor	r5, r5
     994:	53 94       	inc	r5
	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
     996:	e5 2c       	mov	r14, r5
     998:	76 2c       	mov	r7, r6
	static const BYTE cvt[] = _EXCVT;
#endif
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
     99a:	ab 81       	ldd	r26, Y+3	; 0x03
     99c:	bc 81       	ldd	r27, Y+4	; 0x04
     99e:	fd 01       	movw	r30, r26
     9a0:	cd 01       	movw	r24, r26
     9a2:	0b 96       	adiw	r24, 0x0b	; 11

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     9a4:	f1 92       	st	Z+, r15
     9a6:	e8 17       	cp	r30, r24
     9a8:	f9 07       	cpc	r31, r25
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <__stack+0xa5>
     9ac:	96 2d       	mov	r25, r6
     9ae:	86 2d       	mov	r24, r6
     9b0:	34 2d       	mov	r19, r4
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <__stack+0xb7>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     9b4:	82 2f       	mov	r24, r18
     9b6:	21 e0       	ldi	r18, 0x01	; 1
     9b8:	28 0f       	add	r18, r24
     9ba:	f6 01       	movw	r30, r12
     9bc:	e8 0f       	add	r30, r24
     9be:	f1 1d       	adc	r31, r1
     9c0:	80 81       	ld	r24, Z
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     9c2:	81 32       	cpi	r24, 0x21	; 33
     9c4:	68 f0       	brcs	.+26     	; 0x9e0 <__stack+0xe1>
     9c6:	8f 32       	cpi	r24, 0x2F	; 47
     9c8:	59 f0       	breq	.+22     	; 0x9e0 <__stack+0xe1>
		if (c == '.' || i >= ni) {
     9ca:	8e 32       	cpi	r24, 0x2E	; 46
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <__stack+0xd1>
     9ce:	eb c0       	rjmp	.+470    	; 0xba6 <__stack+0x2a7>
     9d0:	93 17       	cp	r25, r19
     9d2:	30 f4       	brcc	.+12     	; 0x9e0 <__stack+0xe1>
			sfn[i++] = d;
		} else
#endif
		{						/* Single byte code */
			if (_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
     9d4:	fd 01       	movw	r30, r26
     9d6:	e9 0f       	add	r30, r25
     9d8:	f1 1d       	adc	r31, r1
     9da:	80 83       	st	Z, r24
     9dc:	9f 5f       	subi	r25, 0xFF	; 255
     9de:	ea cf       	rjmp	.-44     	; 0x9b4 <__stack+0xb5>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
     9e0:	c2 0e       	add	r12, r18
     9e2:	d1 1c       	adc	r13, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     9e4:	95 2d       	mov	r25, r5
     9e6:	81 32       	cpi	r24, 0x21	; 33
     9e8:	08 f0       	brcs	.+2      	; 0x9ec <__stack+0xed>
     9ea:	96 2d       	mov	r25, r6
     9ec:	1b 96       	adiw	r26, 0x0b	; 11
     9ee:	9c 93       	st	X, r25
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
     9f0:	ce 01       	movw	r24, r28
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <dir_rewind>
     9f8:	98 2f       	mov	r25, r24
	if (res != FR_OK) return res;
     9fa:	81 11       	cpse	r24, r1
     9fc:	98 c0       	rjmp	.+304    	; 0xb2e <__stack+0x22f>

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
     9fe:	29 81       	ldd	r18, Y+1	; 0x01
     a00:	3a 81       	ldd	r19, Y+2	; 0x02
     a02:	2f 70       	andi	r18, 0x0F	; 15
     a04:	33 27       	eor	r19, r19
     a06:	22 0f       	add	r18, r18
     a08:	33 1f       	adc	r19, r19
     a0a:	22 95       	swap	r18
     a0c:	32 95       	swap	r19
     a0e:	30 7f       	andi	r19, 0xF0	; 240
     a10:	32 27       	eor	r19, r18
     a12:	20 7f       	andi	r18, 0xF0	; 240
     a14:	32 27       	eor	r19, r18
     a16:	49 85       	ldd	r20, Y+9	; 0x09
     a18:	5a 85       	ldd	r21, Y+10	; 0x0a
     a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a1e:	00 e2       	ldi	r16, 0x20	; 32
     a20:	10 e0       	ldi	r17, 0x00	; 0
     a22:	ce 01       	movw	r24, r28
     a24:	49 96       	adiw	r24, 0x19	; 25
     a26:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
			? FR_DISK_ERR : FR_OK;
     a2a:	9e 2d       	mov	r25, r14
     a2c:	81 11       	cpse	r24, r1
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <__stack+0x133>
     a30:	97 2d       	mov	r25, r7
		if (res != FR_OK) break;
     a32:	91 11       	cpse	r25, r1
     a34:	7c c0       	rjmp	.+248    	; 0xb2e <__stack+0x22f>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     a36:	89 8d       	ldd	r24, Y+25	; 0x19
     a38:	88 23       	and	r24, r24
     a3a:	09 f4       	brne	.+2      	; 0xa3e <__stack+0x13f>
     a3c:	c4 c0       	rjmp	.+392    	; 0xbc6 <__stack+0x2c7>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     a3e:	6c a1       	ldd	r22, Y+36	; 0x24
     a40:	63 fd       	sbrc	r22, 3
     a42:	11 c0       	rjmp	.+34     	; 0xa66 <__stack+0x167>
     a44:	4b 81       	ldd	r20, Y+3	; 0x03
     a46:	5c 81       	ldd	r21, Y+4	; 0x04
     a48:	de 01       	movw	r26, r28
     a4a:	59 96       	adiw	r26, 0x19	; 25
     a4c:	fa 01       	movw	r30, r20
     a4e:	9a 01       	movw	r18, r20
     a50:	25 5f       	subi	r18, 0xF5	; 245
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	04 c0       	rjmp	.+8      	; 0xa5e <__stack+0x15f>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     a56:	e2 17       	cp	r30, r18
     a58:	f3 07       	cpc	r31, r19
     a5a:	09 f4       	brne	.+2      	; 0xa5e <__stack+0x15f>
     a5c:	59 c0       	rjmp	.+178    	; 0xb10 <__stack+0x211>
     a5e:	9d 91       	ld	r25, X+
     a60:	81 91       	ld	r24, Z+
     a62:	98 17       	cp	r25, r24
     a64:	c1 f3       	breq	.-16     	; 0xa56 <__stack+0x157>
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     a66:	80 90 5f 01 	lds	r8, 0x015F
     a6a:	90 90 60 01 	lds	r9, 0x0160


	i = dj->index + 1;
     a6e:	09 81       	ldd	r16, Y+1	; 0x01
     a70:	1a 81       	ldd	r17, Y+2	; 0x02
     a72:	0f 5f       	subi	r16, 0xFF	; 255
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     a76:	09 f4       	brne	.+2      	; 0xa7a <__stack+0x17b>
     a78:	9c c0       	rjmp	.+312    	; 0xbb2 <__stack+0x2b3>
     a7a:	49 85       	ldd	r20, Y+9	; 0x09
     a7c:	5a 85       	ldd	r21, Y+10	; 0x0a
     a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a80:	7c 85       	ldd	r23, Y+12	; 0x0c
     a82:	41 15       	cp	r20, r1
     a84:	51 05       	cpc	r21, r1
     a86:	61 05       	cpc	r22, r1
     a88:	71 05       	cpc	r23, r1
     a8a:	09 f4       	brne	.+2      	; 0xa8e <__stack+0x18f>
     a8c:	94 c0       	rjmp	.+296    	; 0xbb6 <__stack+0x2b7>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
     a8e:	c8 01       	movw	r24, r16
     a90:	8f 70       	andi	r24, 0x0F	; 15
     a92:	99 27       	eor	r25, r25
     a94:	89 2b       	or	r24, r25
     a96:	c9 f5       	brne	.+114    	; 0xb0a <__stack+0x20b>
		dj->sect++;			/* Next sector */
     a98:	4f 5f       	subi	r20, 0xFF	; 255
     a9a:	5f 4f       	sbci	r21, 0xFF	; 255
     a9c:	6f 4f       	sbci	r22, 0xFF	; 255
     a9e:	7f 4f       	sbci	r23, 0xFF	; 255
     aa0:	49 87       	std	Y+9, r20	; 0x09
     aa2:	5a 87       	std	Y+10, r21	; 0x0a
     aa4:	6b 87       	std	Y+11, r22	; 0x0b
     aa6:	7c 87       	std	Y+12, r23	; 0x0c

		if (dj->clust == 0) {	/* Static table */
     aa8:	8f 81       	ldd	r24, Y+7	; 0x07
     aaa:	98 85       	ldd	r25, Y+8	; 0x08
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	41 f4       	brne	.+16     	; 0xac0 <__stack+0x1c1>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     ab0:	f4 01       	movw	r30, r8
     ab2:	84 81       	ldd	r24, Z+4	; 0x04
     ab4:	95 81       	ldd	r25, Z+5	; 0x05
     ab6:	08 17       	cp	r16, r24
     ab8:	19 07       	cpc	r17, r25
     aba:	08 f0       	brcs	.+2      	; 0xabe <__stack+0x1bf>
     abc:	7e c0       	rjmp	.+252    	; 0xbba <__stack+0x2bb>
     abe:	25 c0       	rjmp	.+74     	; 0xb0a <__stack+0x20b>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
     ac0:	f4 01       	movw	r30, r8
     ac2:	22 81       	ldd	r18, Z+2	; 0x02
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	21 50       	subi	r18, 0x01	; 1
     ac8:	31 09       	sbc	r19, r1
     aca:	a8 01       	movw	r20, r16
     acc:	52 95       	swap	r21
     ace:	42 95       	swap	r20
     ad0:	4f 70       	andi	r20, 0x0F	; 15
     ad2:	45 27       	eor	r20, r21
     ad4:	5f 70       	andi	r21, 0x0F	; 15
     ad6:	45 27       	eor	r20, r21
     ad8:	24 23       	and	r18, r20
     ada:	35 23       	and	r19, r21
     adc:	23 2b       	or	r18, r19
     ade:	a9 f4       	brne	.+42     	; 0xb0a <__stack+0x20b>
				clst = get_fat(dj->clust);		/* Get next cluster */
     ae0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	91 05       	cpc	r25, r1
     ae8:	08 f4       	brcc	.+2      	; 0xaec <__stack+0x1ed>
     aea:	69 c0       	rjmp	.+210    	; 0xbbe <__stack+0x2bf>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
     aec:	f4 01       	movw	r30, r8
     aee:	26 81       	ldd	r18, Z+6	; 0x06
     af0:	37 81       	ldd	r19, Z+7	; 0x07
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	08 f0       	brcs	.+2      	; 0xafa <__stack+0x1fb>
     af8:	64 c0       	rjmp	.+200    	; 0xbc2 <__stack+0x2c3>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     afa:	98 87       	std	Y+8, r25	; 0x08
     afc:	8f 83       	std	Y+7, r24	; 0x07
				dj->sect = clust2sect(clst);
     afe:	0e 94 4b 02 	call	0x496	; 0x496 <clust2sect>
     b02:	69 87       	std	Y+9, r22	; 0x09
     b04:	7a 87       	std	Y+10, r23	; 0x0a
     b06:	8b 87       	std	Y+11, r24	; 0x0b
     b08:	9c 87       	std	Y+12, r25	; 0x0c
			}
		}
	}

	dj->index = i;
     b0a:	1a 83       	std	Y+2, r17	; 0x02
     b0c:	09 83       	std	Y+1, r16	; 0x01
     b0e:	77 cf       	rjmp	.-274    	; 0x9fe <__stack+0xff>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
     b10:	fa 01       	movw	r30, r20
     b12:	83 85       	ldd	r24, Z+11	; 0x0b
     b14:	81 11       	cpse	r24, r1
     b16:	0d c0       	rjmp	.+26     	; 0xb32 <__stack+0x233>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
     b18:	64 ff       	sbrs	r22, 4
     b1a:	57 c0       	rjmp	.+174    	; 0xbca <__stack+0x2cb>

	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir+DIR_FstClusHI);
		clst <<= 16;
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
     b1c:	8c a9       	ldd	r24, Y+52	; 0x34
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	98 2f       	mov	r25, r24
     b22:	88 27       	eor	r24, r24
     b24:	2b a9       	ldd	r18, Y+51	; 0x33
     b26:	82 2b       	or	r24, r18
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
			}
			dj->sclust = get_clust(dir);	/* Follow next */
     b28:	9e 83       	std	Y+6, r25	; 0x06
     b2a:	8d 83       	std	Y+5, r24	; 0x05
     b2c:	36 cf       	rjmp	.-404    	; 0x99a <__stack+0x9b>
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
     b2e:	91 11       	cpse	r25, r1
     b30:	34 c0       	rjmp	.+104    	; 0xb9a <__stack+0x29b>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
     b32:	89 8d       	ldd	r24, Y+25	; 0x19
     b34:	88 23       	and	r24, r24
     b36:	99 f1       	breq	.+102    	; 0xb9e <__stack+0x29f>
     b38:	8c a1       	ldd	r24, Y+36	; 0x24
     b3a:	84 fd       	sbrc	r24, 4
     b3c:	32 c0       	rjmp	.+100    	; 0xba2 <__stack+0x2a3>

	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir+DIR_FstClusHI);
		clst <<= 16;
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
     b3e:	8c a9       	ldd	r24, Y+52	; 0x34
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	98 2f       	mov	r25, r24
     b44:	88 27       	eor	r24, r24
     b46:	2b a9       	ldd	r18, Y+51	; 0x33
     b48:	82 2b       	or	r24, r18
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;

	fs->org_clust = get_clust(dir);		/* File start cluster */
     b4a:	f5 01       	movw	r30, r10
     b4c:	95 8f       	std	Z+29, r25	; 0x1d
     b4e:	84 8f       	std	Z+28, r24	; 0x1c
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
     b50:	28 ad       	ldd	r18, Y+56	; 0x38
     b52:	8f a9       	ldd	r24, Y+55	; 0x37
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	dc 01       	movw	r26, r24
     b5c:	99 27       	eor	r25, r25
     b5e:	88 27       	eor	r24, r24
     b60:	b2 2b       	or	r27, r18
     b62:	2d a9       	ldd	r18, Y+53	; 0x35
     b64:	ac 01       	movw	r20, r24
     b66:	bd 01       	movw	r22, r26
     b68:	42 2b       	or	r20, r18
     b6a:	2e a9       	ldd	r18, Y+54	; 0x36
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	92 2f       	mov	r25, r18
     b70:	88 27       	eor	r24, r24
     b72:	a0 e0       	ldi	r26, 0x00	; 0
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	84 2b       	or	r24, r20
     b78:	95 2b       	or	r25, r21
     b7a:	a6 2b       	or	r26, r22
     b7c:	b7 2b       	or	r27, r23
     b7e:	80 8f       	std	Z+24, r24	; 0x18
     b80:	91 8f       	std	Z+25, r25	; 0x19
     b82:	a2 8f       	std	Z+26, r26	; 0x1a
     b84:	b3 8f       	std	Z+27, r27	; 0x1b
	fs->fptr = 0;						/* File pointer */
     b86:	14 8a       	std	Z+20, r1	; 0x14
     b88:	15 8a       	std	Z+21, r1	; 0x15
     b8a:	16 8a       	std	Z+22, r1	; 0x16
     b8c:	17 8a       	std	Z+23, r1	; 0x17
	fs->flag = FA_OPENED;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	1b c0       	rjmp	.+54     	; 0xbcc <__stack+0x2cd>
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     b96:	85 e0       	ldi	r24, 0x05	; 5
     b98:	19 c0       	rjmp	.+50     	; 0xbcc <__stack+0x2cd>
     b9a:	89 2f       	mov	r24, r25
     b9c:	17 c0       	rjmp	.+46     	; 0xbcc <__stack+0x2cd>
	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	15 c0       	rjmp	.+42     	; 0xbcc <__stack+0x2cd>
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	13 c0       	rjmp	.+38     	; 0xbcc <__stack+0x2cd>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
     ba6:	38 30       	cpi	r19, 0x08	; 8
     ba8:	09 f0       	breq	.+2      	; 0xbac <__stack+0x2ad>
     baa:	1a cf       	rjmp	.-460    	; 0x9e0 <__stack+0xe1>
			i = 8; ni = 11;
     bac:	93 2d       	mov	r25, r3
     bae:	32 2d       	mov	r19, r2
     bb0:	01 cf       	rjmp	.-510    	; 0x9b4 <__stack+0xb5>
	FATFS *fs = FatFs;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	0b c0       	rjmp	.+22     	; 0xbcc <__stack+0x2cd>
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	09 c0       	rjmp	.+18     	; 0xbcc <__stack+0x2cd>
	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	07 c0       	rjmp	.+14     	; 0xbcc <__stack+0x2cd>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	05 c0       	rjmp	.+10     	; 0xbcc <__stack+0x2cd>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	03 c0       	rjmp	.+6      	; 0xbcc <__stack+0x2cd>
	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	b2 cf       	rjmp	.-156    	; 0xb2e <__stack+0x22f>
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
     bca:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
     bcc:	e8 96       	adiw	r28, 0x38	; 56
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	9f 90       	pop	r9
     bee:	8f 90       	pop	r8
     bf0:	7f 90       	pop	r7
     bf2:	6f 90       	pop	r6
     bf4:	5f 90       	pop	r5
     bf6:	4f 90       	pop	r4
     bf8:	3f 90       	pop	r3
     bfa:	2f 90       	pop	r2
     bfc:	08 95       	ret

00000bfe <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	UINT* bw			/* Pointer to number of bytes written */
)
{
     bfe:	4f 92       	push	r4
     c00:	5f 92       	push	r5
     c02:	6f 92       	push	r6
     c04:	7f 92       	push	r7
     c06:	8f 92       	push	r8
     c08:	9f 92       	push	r9
     c0a:	af 92       	push	r10
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	6c 01       	movw	r12, r24
     c20:	7b 01       	movw	r14, r22
     c22:	5a 01       	movw	r10, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	BYTE cs;
	UINT wcnt;
	FATFS *fs = FatFs;
     c24:	c0 91 5f 01 	lds	r28, 0x015F
     c28:	d0 91 60 01 	lds	r29, 0x0160


	*bw = 0;
     c2c:	fa 01       	movw	r30, r20
     c2e:	11 82       	std	Z+1, r1	; 0x01
     c30:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     c32:	20 97       	sbiw	r28, 0x00	; 0
     c34:	09 f4       	brne	.+2      	; 0xc38 <pf_write+0x3a>
     c36:	d6 c0       	rjmp	.+428    	; 0xde4 <pf_write+0x1e6>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	80 ff       	sbrs	r24, 0
     c3c:	d5 c0       	rjmp	.+426    	; 0xde8 <pf_write+0x1ea>
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
     c3e:	67 2b       	or	r22, r23
     c40:	99 f4       	brne	.+38     	; 0xc68 <pf_write+0x6a>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) ABORT(FR_DISK_ERR);
     c42:	86 ff       	sbrs	r24, 6
     c44:	0c c0       	rjmp	.+24     	; 0xc5e <pf_write+0x60>
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	ba 01       	movw	r22, r20
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 c6 01 	call	0x38c	; 0x38c <disk_writep>
     c54:	88 23       	and	r24, r24
     c56:	19 f0       	breq	.+6      	; 0xc5e <pf_write+0x60>
     c58:	19 82       	std	Y+1, r1	; 0x01
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	c8 c0       	rjmp	.+400    	; 0xdee <pf_write+0x1f0>
		fs->flag &= ~FA__WIP;
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	8f 7b       	andi	r24, 0xBF	; 191
     c62:	89 83       	std	Y+1, r24	; 0x01
		return FR_OK;
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	c3 c0       	rjmp	.+390    	; 0xdee <pf_write+0x1f0>
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round-down fptr to the sector boundary */
     c68:	86 fd       	sbrc	r24, 6
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <pf_write+0x82>
			fs->fptr &= 0xFFFFFE00;
     c6c:	8c 89       	ldd	r24, Y+20	; 0x14
     c6e:	9d 89       	ldd	r25, Y+21	; 0x15
     c70:	ae 89       	ldd	r26, Y+22	; 0x16
     c72:	bf 89       	ldd	r27, Y+23	; 0x17
     c74:	88 27       	eor	r24, r24
     c76:	9e 7f       	andi	r25, 0xFE	; 254
     c78:	8c 8b       	std	Y+20, r24	; 0x14
     c7a:	9d 8b       	std	Y+21, r25	; 0x15
     c7c:	ae 8b       	std	Y+22, r26	; 0x16
     c7e:	bf 8b       	std	Y+23, r27	; 0x17
	}
	remain = fs->fsize - fs->fptr;
     c80:	88 8d       	ldd	r24, Y+24	; 0x18
     c82:	99 8d       	ldd	r25, Y+25	; 0x19
     c84:	aa 8d       	ldd	r26, Y+26	; 0x1a
     c86:	bb 8d       	ldd	r27, Y+27	; 0x1b
     c88:	4c 89       	ldd	r20, Y+20	; 0x14
     c8a:	5d 89       	ldd	r21, Y+21	; 0x15
     c8c:	6e 89       	ldd	r22, Y+22	; 0x16
     c8e:	7f 89       	ldd	r23, Y+23	; 0x17
     c90:	84 1b       	sub	r24, r20
     c92:	95 0b       	sbc	r25, r21
     c94:	a6 0b       	sbc	r26, r22
     c96:	b7 0b       	sbc	r27, r23
	if (btw > remain) btw = (UINT)remain;			/* Truncate btw by remaining bytes */
     c98:	a7 01       	movw	r20, r14
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	84 17       	cp	r24, r20
     ca0:	95 07       	cpc	r25, r21
     ca2:	a6 07       	cpc	r26, r22
     ca4:	b7 07       	cpc	r27, r23
     ca6:	20 f4       	brcc	.+8      	; 0xcb0 <pf_write+0xb2>
     ca8:	7c 01       	movw	r14, r24

	while (btw)	{									/* Repeat until all data transferred */
     caa:	89 2b       	or	r24, r25
     cac:	09 f4       	brne	.+2      	; 0xcb0 <pf_write+0xb2>
     cae:	9e c0       	rjmp	.+316    	; 0xdec <pf_write+0x1ee>
			if (!sect) ABORT(FR_DISK_ERR);
			fs->dsect = sect + cs;
			if (disk_writep(0, fs->dsect)) ABORT(FR_DISK_ERR);	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - (UINT)fs->fptr % 512;			/* Number of bytes to write to the sector */
     cb0:	81 2c       	mov	r8, r1
     cb2:	68 94       	set
     cb4:	99 24       	eor	r9, r9
     cb6:	91 f8       	bld	r9, 1
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (UINT)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if ((UINT)fs->fptr % 512 == 0) {			/* On the sector boundary? */
     cb8:	8c 89       	ldd	r24, Y+20	; 0x14
     cba:	9d 89       	ldd	r25, Y+21	; 0x15
     cbc:	ae 89       	ldd	r26, Y+22	; 0x16
     cbe:	bf 89       	ldd	r27, Y+23	; 0x17
     cc0:	9c 01       	movw	r18, r24
     cc2:	31 70       	andi	r19, 0x01	; 1
     cc4:	23 2b       	or	r18, r19
     cc6:	09 f0       	breq	.+2      	; 0xcca <pf_write+0xcc>
     cc8:	44 c0       	rjmp	.+136    	; 0xd52 <pf_write+0x154>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
     cca:	1a 81       	ldd	r17, Y+2	; 0x02
     ccc:	11 50       	subi	r17, 0x01	; 1
     cce:	ac 01       	movw	r20, r24
     cd0:	bd 01       	movw	r22, r26
     cd2:	03 2e       	mov	r0, r19
     cd4:	39 e0       	ldi	r19, 0x09	; 9
     cd6:	76 95       	lsr	r23
     cd8:	67 95       	ror	r22
     cda:	57 95       	ror	r21
     cdc:	47 95       	ror	r20
     cde:	3a 95       	dec	r19
     ce0:	d1 f7       	brne	.-12     	; 0xcd6 <pf_write+0xd8>
     ce2:	30 2d       	mov	r19, r0
     ce4:	14 23       	and	r17, r20
			if (!cs) {								/* On the cluster boundary? */
     ce6:	99 f4       	brne	.+38     	; 0xd0e <pf_write+0x110>
				if (fs->fptr == 0)					/* On the top of the file? */
     ce8:	89 2b       	or	r24, r25
     cea:	8a 2b       	or	r24, r26
     cec:	8b 2b       	or	r24, r27
     cee:	19 f4       	brne	.+6      	; 0xcf6 <pf_write+0xf8>
					clst = fs->org_clust;
     cf0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cf2:	9d 8d       	ldd	r25, Y+29	; 0x1d
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <pf_write+0x100>
				else
					clst = get_fat(fs->curr_clust);
     cf6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cf8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     cfa:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <get_fat>
				if (clst <= 1) ABORT(FR_DISK_ERR);
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	91 05       	cpc	r25, r1
     d02:	18 f4       	brcc	.+6      	; 0xd0a <pf_write+0x10c>
     d04:	19 82       	std	Y+1, r1	; 0x01
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	72 c0       	rjmp	.+228    	; 0xdee <pf_write+0x1f0>
				fs->curr_clust = clst;				/* Update current cluster */
     d0a:	9f 8f       	std	Y+31, r25	; 0x1f
     d0c:	8e 8f       	std	Y+30, r24	; 0x1e
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
     d0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d10:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d12:	0e 94 4b 02 	call	0x496	; 0x496 <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
     d16:	61 15       	cp	r22, r1
     d18:	71 05       	cpc	r23, r1
     d1a:	81 05       	cpc	r24, r1
     d1c:	91 05       	cpc	r25, r1
     d1e:	19 f4       	brne	.+6      	; 0xd26 <pf_write+0x128>
     d20:	19 82       	std	Y+1, r1	; 0x01
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	64 c0       	rjmp	.+200    	; 0xdee <pf_write+0x1f0>
			fs->dsect = sect + cs;
     d26:	ab 01       	movw	r20, r22
     d28:	bc 01       	movw	r22, r24
     d2a:	41 0f       	add	r20, r17
     d2c:	51 1d       	adc	r21, r1
     d2e:	61 1d       	adc	r22, r1
     d30:	71 1d       	adc	r23, r1
     d32:	48 a3       	std	Y+32, r20	; 0x20
     d34:	59 a3       	std	Y+33, r21	; 0x21
     d36:	6a a3       	std	Y+34, r22	; 0x22
     d38:	7b a3       	std	Y+35, r23	; 0x23
			if (disk_writep(0, fs->dsect)) ABORT(FR_DISK_ERR);	/* Initiate a sector write operation */
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 c6 01 	call	0x38c	; 0x38c <disk_writep>
     d42:	88 23       	and	r24, r24
     d44:	19 f0       	breq	.+6      	; 0xd4c <pf_write+0x14e>
     d46:	19 82       	std	Y+1, r1	; 0x01
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	51 c0       	rjmp	.+162    	; 0xdee <pf_write+0x1f0>
			fs->flag |= FA__WIP;
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	80 64       	ori	r24, 0x40	; 64
     d50:	89 83       	std	Y+1, r24	; 0x01
		}
		wcnt = 512 - (UINT)fs->fptr % 512;			/* Number of bytes to write to the sector */
     d52:	8c 89       	ldd	r24, Y+20	; 0x14
     d54:	9d 89       	ldd	r25, Y+21	; 0x15
     d56:	91 70       	andi	r25, 0x01	; 1
     d58:	94 01       	movw	r18, r8
     d5a:	28 1b       	sub	r18, r24
     d5c:	39 0b       	sbc	r19, r25
     d5e:	87 01       	movw	r16, r14
     d60:	2e 15       	cp	r18, r14
     d62:	3f 05       	cpc	r19, r15
     d64:	08 f4       	brcc	.+2      	; 0xd68 <pf_write+0x16a>
     d66:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) ABORT(FR_DISK_ERR);	/* Send data to the sector */
     d68:	28 01       	movw	r4, r16
     d6a:	61 2c       	mov	r6, r1
     d6c:	71 2c       	mov	r7, r1
     d6e:	b3 01       	movw	r22, r6
     d70:	a2 01       	movw	r20, r4
     d72:	c6 01       	movw	r24, r12
     d74:	0e 94 c6 01 	call	0x38c	; 0x38c <disk_writep>
     d78:	88 23       	and	r24, r24
     d7a:	19 f0       	breq	.+6      	; 0xd82 <pf_write+0x184>
     d7c:	19 82       	std	Y+1, r1	; 0x01
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	36 c0       	rjmp	.+108    	; 0xdee <pf_write+0x1f0>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
     d82:	8c 89       	ldd	r24, Y+20	; 0x14
     d84:	9d 89       	ldd	r25, Y+21	; 0x15
     d86:	ae 89       	ldd	r26, Y+22	; 0x16
     d88:	bf 89       	ldd	r27, Y+23	; 0x17
     d8a:	48 0e       	add	r4, r24
     d8c:	59 1e       	adc	r5, r25
     d8e:	6a 1e       	adc	r6, r26
     d90:	7b 1e       	adc	r7, r27
     d92:	4c 8a       	std	Y+20, r4	; 0x14
     d94:	5d 8a       	std	Y+21, r5	; 0x15
     d96:	6e 8a       	std	Y+22, r6	; 0x16
     d98:	7f 8a       	std	Y+23, r7	; 0x17
     d9a:	c0 0e       	add	r12, r16
     d9c:	d1 1e       	adc	r13, r17
		btw -= wcnt; *bw += wcnt;
     d9e:	e0 1a       	sub	r14, r16
     da0:	f1 0a       	sbc	r15, r17
     da2:	f5 01       	movw	r30, r10
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	08 0f       	add	r16, r24
     daa:	19 1f       	adc	r17, r25
     dac:	11 83       	std	Z+1, r17	; 0x01
     dae:	00 83       	st	Z, r16
		if ((UINT)fs->fptr % 512 == 0) {
     db0:	8c 89       	ldd	r24, Y+20	; 0x14
     db2:	9d 89       	ldd	r25, Y+21	; 0x15
     db4:	91 70       	andi	r25, 0x01	; 1
     db6:	89 2b       	or	r24, r25
     db8:	79 f4       	brne	.+30     	; 0xdd8 <pf_write+0x1da>
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	ba 01       	movw	r22, r20
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 c6 01 	call	0x38c	; 0x38c <disk_writep>
     dc8:	88 23       	and	r24, r24
     dca:	19 f0       	breq	.+6      	; 0xdd2 <pf_write+0x1d4>
     dcc:	19 82       	std	Y+1, r1	; 0x01
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	0e c0       	rjmp	.+28     	; 0xdee <pf_write+0x1f0>
			fs->flag &= ~FA__WIP;
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	8f 7b       	andi	r24, 0xBF	; 191
     dd6:	89 83       	std	Y+1, r24	; 0x01
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (UINT)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
     dd8:	e1 14       	cp	r14, r1
     dda:	f1 04       	cpc	r15, r1
     ddc:	09 f0       	breq	.+2      	; 0xde0 <pf_write+0x1e2>
     dde:	6c cf       	rjmp	.-296    	; 0xcb8 <pf_write+0xba>
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	05 c0       	rjmp	.+10     	; 0xdee <pf_write+0x1f0>
	UINT wcnt;
	FATFS *fs = FatFs;


	*bw = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     de4:	85 e0       	ldi	r24, 0x05	; 5
     de6:	03 c0       	rjmp	.+6      	; 0xdee <pf_write+0x1f0>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
     de8:	84 e0       	ldi	r24, 0x04	; 4
     dea:	01 c0       	rjmp	.+2      	; 0xdee <pf_write+0x1f0>
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
     dec:	80 e0       	ldi	r24, 0x00	; 0
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	7f 90       	pop	r7
     e08:	6f 90       	pop	r6
     e0a:	5f 90       	pop	r5
     e0c:	4f 90       	pop	r4
     e0e:	08 95       	ret

00000e10 <init_tictoc>:

volatile uint32_t timer_us = 0, timer_ms = 0;

void init_tictoc()
{
	TCCR0A |= (1<<WGM01);
     e10:	84 b5       	in	r24, 0x24	; 36
     e12:	82 60       	ori	r24, 0x02	; 2
     e14:	84 bd       	out	0x24, r24	; 36
	OCR0A = 250;
     e16:	8a ef       	ldi	r24, 0xFA	; 250
     e18:	87 bd       	out	0x27, r24	; 39
	// Set 64 clock prescaller on timer 0
	TCCR0B |= (1<<CS01) | (1<<CS00);
     e1a:	85 b5       	in	r24, 0x25	; 37
     e1c:	83 60       	ori	r24, 0x03	; 3
     e1e:	85 bd       	out	0x25, r24	; 37
	// Set Timer/Counter0 Overflow interrupt Enable
	TIMSK0 |= (1<<OCIE0A);
     e20:	ee e6       	ldi	r30, 0x6E	; 110
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	82 60       	ori	r24, 0x02	; 2
     e28:	80 83       	st	Z, r24
	// Global interrupt enable
	sei();
     e2a:	78 94       	sei
	TCNT0 = 0;
     e2c:	16 bc       	out	0x26, r1	; 38
     e2e:	08 95       	ret

00000e30 <tic>:
}

void tic()
{
	TCNT0 = 0;
     e30:	16 bc       	out	0x26, r1	; 38
	timer_us = 0;
     e32:	10 92 65 01 	sts	0x0165, r1
     e36:	10 92 66 01 	sts	0x0166, r1
     e3a:	10 92 67 01 	sts	0x0167, r1
     e3e:	10 92 68 01 	sts	0x0168, r1
	timer_ms = 0;
     e42:	10 92 61 01 	sts	0x0161, r1
     e46:	10 92 62 01 	sts	0x0162, r1
     e4a:	10 92 63 01 	sts	0x0163, r1
     e4e:	10 92 64 01 	sts	0x0164, r1
     e52:	08 95       	ret

00000e54 <millis>:
}

uint32_t millis()
{
	return timer_ms;
     e54:	60 91 61 01 	lds	r22, 0x0161
     e58:	70 91 62 01 	lds	r23, 0x0162
     e5c:	80 91 63 01 	lds	r24, 0x0163
     e60:	90 91 64 01 	lds	r25, 0x0164
}
     e64:	08 95       	ret

00000e66 <__vector_14>:
	timer_us = (millis()*1000) + (TCNT0*4);
	return timer_us;
}

ISR(TIMER0_COMPA_vect)
{
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
	timer_ms += 1;
     e78:	80 91 61 01 	lds	r24, 0x0161
     e7c:	90 91 62 01 	lds	r25, 0x0162
     e80:	a0 91 63 01 	lds	r26, 0x0163
     e84:	b0 91 64 01 	lds	r27, 0x0164
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	a1 1d       	adc	r26, r1
     e8c:	b1 1d       	adc	r27, r1
     e8e:	80 93 61 01 	sts	0x0161, r24
     e92:	90 93 62 01 	sts	0x0162, r25
     e96:	a0 93 63 01 	sts	0x0163, r26
     e9a:	b0 93 64 01 	sts	0x0164, r27
     e9e:	bf 91       	pop	r27
     ea0:	af 91       	pop	r26
     ea2:	9f 91       	pop	r25
     ea4:	8f 91       	pop	r24
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
     eb0:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
     eb4:	87 e6       	ldi	r24, 0x67	; 103
     eb6:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
     eba:	e0 ec       	ldi	r30, 0xC0	; 192
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8d 7f       	andi	r24, 0xFD	; 253
     ec2:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
     ec4:	88 e1       	ldi	r24, 0x18	; 24
     ec6:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
     eca:	86 e0       	ldi	r24, 0x06	; 6
     ecc:	80 93 c2 00 	sts	0x00C2, r24
     ed0:	08 95       	ret

00000ed2 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
     ed2:	e0 ec       	ldi	r30, 0xC0	; 192
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	90 81       	ld	r25, Z
     ed8:	95 ff       	sbrs	r25, 5
     eda:	fd cf       	rjmp	.-6      	; 0xed6 <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
     edc:	80 93 c6 00 	sts	0x00C6, r24
     ee0:	08 95       	ret

00000ee2 <printLine>:
    transmitByte(myString[i]);
    i++;
  }
}

void printLine(const char myString[]) {
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	while (myString[i]) {
     eea:	fc 01       	movw	r30, r24
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	51 f0       	breq	.+20     	; 0xf06 <printLine+0x24>
     ef2:	c0 e0       	ldi	r28, 0x00	; 0
		transmitByte(myString[i]);
     ef4:	0e 94 69 07 	call	0xed2	; 0xed2 <transmitByte>
		i++;
     ef8:	cf 5f       	subi	r28, 0xFF	; 255
  }
}

void printLine(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
     efa:	f8 01       	movw	r30, r16
     efc:	ec 0f       	add	r30, r28
     efe:	f1 1d       	adc	r31, r1
     f00:	80 81       	ld	r24, Z
     f02:	81 11       	cpse	r24, r1
     f04:	f7 cf       	rjmp	.-18     	; 0xef4 <printLine+0x12>
		transmitByte(myString[i]);
		i++;
	}
	transmitByte(10);
     f06:	8a e0       	ldi	r24, 0x0A	; 10
     f08:	0e 94 69 07 	call	0xed2	; 0xed2 <transmitByte>
}
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <main>:
#include <util/delay.h>
#include "USART.h"
#include "tictoc.h"

int main(void)
{
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	a8 97       	sbiw	r28, 0x28	; 40
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f28:	2f ef       	ldi	r18, 0xFF	; 255
     f2a:	83 e2       	ldi	r24, 0x23	; 35
     f2c:	94 ef       	ldi	r25, 0xF4	; 244
     f2e:	21 50       	subi	r18, 0x01	; 1
     f30:	80 40       	sbci	r24, 0x00	; 0
     f32:	90 40       	sbci	r25, 0x00	; 0
     f34:	e1 f7       	brne	.-8      	; 0xf2e <main+0x1a>
     f36:	00 c0       	rjmp	.+0      	; 0xf38 <main+0x24>
     f38:	00 00       	nop
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	80 e8       	ldi	r24, 0x80	; 128
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	80 93 61 00 	sts	0x0061, r24
     f46:	90 93 61 00 	sts	0x0061, r25
     f4a:	0f be       	out	0x3f, r0	; 63
	FRESULT mountResult, openFileResult, writeToFileResult;
	
	uint32_t milisecs;
	
	clock_prescale_set(clock_div_1); // set clock to 16MHz
	initUSART();
     f4c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <initUSART>
	init_tictoc();
     f50:	0e 94 08 07 	call	0xe10	; 0xe10 <init_tictoc>
	
	mountResult = pf_mount(&fs);
     f54:	ce 01       	movw	r24, r28
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	0e 94 24 03 	call	0x648	; 0x648 <pf_mount>
	if (mountResult != 0) {
     f5c:	88 23       	and	r24, r24
     f5e:	29 f0       	breq	.+10     	; 0xf6a <main+0x56>
		printLine("Error mounting the SD card");
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 71 07 	call	0xee2	; 0xee2 <printLine>
		while(1);
     f68:	ff cf       	rjmp	.-2      	; 0xf68 <main+0x54>
	}
	
	UINT bytesWritten = 0;
     f6a:	1e a2       	std	Y+38, r1	; 0x26
     f6c:	1d a2       	std	Y+37, r1	; 0x25
     f6e:	2f ef       	ldi	r18, 0xFF	; 255
     f70:	83 ed       	ldi	r24, 0xD3	; 211
     f72:	90 e3       	ldi	r25, 0x30	; 48
     f74:	21 50       	subi	r18, 0x01	; 1
     f76:	80 40       	sbci	r24, 0x00	; 0
     f78:	90 40       	sbci	r25, 0x00	; 0
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <main+0x60>
     f7c:	00 c0       	rjmp	.+0      	; 0xf7e <main+0x6a>
     f7e:	00 00       	nop
	
	_delay_ms(1000);
	
	openFileResult = 1;
	while (openFileResult) {
		openFileResult = pf_open("MYLOG.TXT");
     f80:	8b e1       	ldi	r24, 0x1B	; 27
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	0e 94 79 04 	call	0x8f2	; 0x8f2 <pf_open>
	UINT bytesWritten = 0;
	
	_delay_ms(1000);
	
	openFileResult = 1;
	while (openFileResult) {
     f88:	81 11       	cpse	r24, r1
     f8a:	fa cf       	rjmp	.-12     	; 0xf80 <main+0x6c>
		openFileResult = pf_open("MYLOG.TXT");
	}
	printLine(">> MYLOG.TXT opened");
     f8c:	85 e2       	ldi	r24, 0x25	; 37
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	0e 94 71 07 	call	0xee2	; 0xee2 <printLine>
	pf_write(0, 0,&bytesWritten);
	*/
		
	char outPacketH, outPacketL;
	
	tic();
     f94:	0e 94 18 07 	call	0xe30	; 0xe30 <tic>
     f98:	2f ef       	ldi	r18, 0xFF	; 255
     f9a:	85 ea       	ldi	r24, 0xA5	; 165
     f9c:	9e e0       	ldi	r25, 0x0E	; 14
     f9e:	21 50       	subi	r18, 0x01	; 1
     fa0:	80 40       	sbci	r24, 0x00	; 0
     fa2:	90 40       	sbci	r25, 0x00	; 0
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <main+0x8a>
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <main+0x94>
     fa8:	00 00       	nop
     faa:	08 ee       	ldi	r16, 0xE8	; 232
     fac:	13 e0       	ldi	r17, 0x03	; 3
	_delay_ms(300);
	for(uint16_t i=0; i<1000; i++) {
		milisecs = millis();
     fae:	0e 94 2a 07 	call	0xe54	; 0xe54 <millis>
		outPacketH = (milisecs>>8);
     fb2:	7f a3       	std	Y+39, r23	; 0x27
		outPacketL = milisecs;
     fb4:	68 a7       	std	Y+40, r22	; 0x28
		/* Write the high byte */
		writeToFileResult = pf_write(&outPacketH, 1, &bytesWritten);
     fb6:	ae 01       	movw	r20, r28
     fb8:	4b 5d       	subi	r20, 0xDB	; 219
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	ce 01       	movw	r24, r28
     fc2:	87 96       	adiw	r24, 0x27	; 39
     fc4:	0e 94 ff 05 	call	0xbfe	; 0xbfe <pf_write>
		if (writeToFileResult != 0) {
     fc8:	88 23       	and	r24, r24
     fca:	21 f0       	breq	.+8      	; 0xfd4 <main+0xc0>
			printLine("Error writing to file.");
     fcc:	89 e3       	ldi	r24, 0x39	; 57
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	0e 94 71 07 	call	0xee2	; 0xee2 <printLine>
		}
		/* Write the low byte */
		writeToFileResult = pf_write(&outPacketL, 1, &bytesWritten);
     fd4:	ae 01       	movw	r20, r28
     fd6:	4b 5d       	subi	r20, 0xDB	; 219
     fd8:	5f 4f       	sbci	r21, 0xFF	; 255
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	ce 01       	movw	r24, r28
     fe0:	88 96       	adiw	r24, 0x28	; 40
     fe2:	0e 94 ff 05 	call	0xbfe	; 0xbfe <pf_write>
		if (writeToFileResult != 0) {
     fe6:	88 23       	and	r24, r24
     fe8:	21 f0       	breq	.+8      	; 0xff2 <main+0xde>
			printLine("Error writing to file.");
     fea:	89 e3       	ldi	r24, 0x39	; 57
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	0e 94 71 07 	call	0xee2	; 0xee2 <printLine>
		}
		/* Write the separator */
		writeToFileResult = pf_write(",", 1, &bytesWritten);
     ff2:	ae 01       	movw	r20, r28
     ff4:	4b 5d       	subi	r20, 0xDB	; 219
     ff6:	5f 4f       	sbci	r21, 0xFF	; 255
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	80 e5       	ldi	r24, 0x50	; 80
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 ff 05 	call	0xbfe	; 0xbfe <pf_write>
		if (writeToFileResult != 0) {
    1004:	88 23       	and	r24, r24
    1006:	21 f0       	breq	.+8      	; 0x1010 <main+0xfc>
			printLine("Error writing to file.");
    1008:	89 e3       	ldi	r24, 0x39	; 57
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	0e 94 71 07 	call	0xee2	; 0xee2 <printLine>
    1010:	01 50       	subi	r16, 0x01	; 1
    1012:	11 09       	sbc	r17, r1
		
	char outPacketH, outPacketL;
	
	tic();
	_delay_ms(300);
	for(uint16_t i=0; i<1000; i++) {
    1014:	61 f6       	brne	.-104    	; 0xfae <main+0x9a>
		writeToFileResult = pf_write(",", 1, &bytesWritten);
		if (writeToFileResult != 0) {
			printLine("Error writing to file.");
		}
	}
	pf_write(0, 0,&bytesWritten);
    1016:	ae 01       	movw	r20, r28
    1018:	4b 5d       	subi	r20, 0xDB	; 219
    101a:	5f 4f       	sbci	r21, 0xFF	; 255
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 ff 05 	call	0xbfe	; 0xbfe <pf_write>
		
    while (1) 
    {
		printLine("main loop");
    1028:	82 e5       	ldi	r24, 0x52	; 82
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	0e 94 71 07 	call	0xee2	; 0xee2 <printLine>
		tic();
    1030:	0e 94 18 07 	call	0xe30	; 0xe30 <tic>
    1034:	2f ef       	ldi	r18, 0xFF	; 255
    1036:	83 ed       	ldi	r24, 0xD3	; 211
    1038:	90 e3       	ldi	r25, 0x30	; 48
    103a:	21 50       	subi	r18, 0x01	; 1
    103c:	80 40       	sbci	r24, 0x00	; 0
    103e:	90 40       	sbci	r25, 0x00	; 0
    1040:	e1 f7       	brne	.-8      	; 0x103a <main+0x126>
    1042:	00 c0       	rjmp	.+0      	; 0x1044 <main+0x130>
    1044:	00 00       	nop
		_delay_ms(1000);
		milisecs = millis();
    1046:	0e 94 2a 07 	call	0xe54	; 0xe54 <millis>
    }
    104a:	ee cf       	rjmp	.-36     	; 0x1028 <main+0x114>

0000104c <__udivmodsi4>:
    104c:	a1 e2       	ldi	r26, 0x21	; 33
    104e:	1a 2e       	mov	r1, r26
    1050:	aa 1b       	sub	r26, r26
    1052:	bb 1b       	sub	r27, r27
    1054:	fd 01       	movw	r30, r26
    1056:	0d c0       	rjmp	.+26     	; 0x1072 <__udivmodsi4_ep>

00001058 <__udivmodsi4_loop>:
    1058:	aa 1f       	adc	r26, r26
    105a:	bb 1f       	adc	r27, r27
    105c:	ee 1f       	adc	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	a2 17       	cp	r26, r18
    1062:	b3 07       	cpc	r27, r19
    1064:	e4 07       	cpc	r30, r20
    1066:	f5 07       	cpc	r31, r21
    1068:	20 f0       	brcs	.+8      	; 0x1072 <__udivmodsi4_ep>
    106a:	a2 1b       	sub	r26, r18
    106c:	b3 0b       	sbc	r27, r19
    106e:	e4 0b       	sbc	r30, r20
    1070:	f5 0b       	sbc	r31, r21

00001072 <__udivmodsi4_ep>:
    1072:	66 1f       	adc	r22, r22
    1074:	77 1f       	adc	r23, r23
    1076:	88 1f       	adc	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	1a 94       	dec	r1
    107c:	69 f7       	brne	.-38     	; 0x1058 <__udivmodsi4_loop>
    107e:	60 95       	com	r22
    1080:	70 95       	com	r23
    1082:	80 95       	com	r24
    1084:	90 95       	com	r25
    1086:	9b 01       	movw	r18, r22
    1088:	ac 01       	movw	r20, r24
    108a:	bd 01       	movw	r22, r26
    108c:	cf 01       	movw	r24, r30
    108e:	08 95       	ret

00001090 <__umulhisi3>:
    1090:	a2 9f       	mul	r26, r18
    1092:	b0 01       	movw	r22, r0
    1094:	b3 9f       	mul	r27, r19
    1096:	c0 01       	movw	r24, r0
    1098:	a3 9f       	mul	r26, r19
    109a:	70 0d       	add	r23, r0
    109c:	81 1d       	adc	r24, r1
    109e:	11 24       	eor	r1, r1
    10a0:	91 1d       	adc	r25, r1
    10a2:	b2 9f       	mul	r27, r18
    10a4:	70 0d       	add	r23, r0
    10a6:	81 1d       	adc	r24, r1
    10a8:	11 24       	eor	r1, r1
    10aa:	91 1d       	adc	r25, r1
    10ac:	08 95       	ret

000010ae <__muluhisi3>:
    10ae:	0e 94 48 08 	call	0x1090	; 0x1090 <__umulhisi3>
    10b2:	a5 9f       	mul	r26, r21
    10b4:	90 0d       	add	r25, r0
    10b6:	b4 9f       	mul	r27, r20
    10b8:	90 0d       	add	r25, r0
    10ba:	a4 9f       	mul	r26, r20
    10bc:	80 0d       	add	r24, r0
    10be:	91 1d       	adc	r25, r1
    10c0:	11 24       	eor	r1, r1
    10c2:	08 95       	ret

000010c4 <_exit>:
    10c4:	f8 94       	cli

000010c6 <__stop_program>:
    10c6:	ff cf       	rjmp	.-2      	; 0x10c6 <__stop_program>
