
AK_SD_pff_test_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00000f5e  00000ff2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800186  00800186  00001078  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f84  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d9  00000000  00000000  000031b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000922  00000000  00000000  0000398d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  000042b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062d  00000000  00000000  000047bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021e6  00000000  00000000  00004de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00006fcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 38       	cpi	r26, 0x86	; 134
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e8       	ldi	r26, 0x86	; 134
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 38       	cpi	r26, 0x89	; 137
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b0 06 	call	0xd60	; 0xd60 <main>
  9e:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_spi>:
				wc = 512;							/* Set byte counter */
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
  a6:	8c e2       	ldi	r24, 0x2C	; 44
  a8:	84 b9       	out	0x04, r24	; 4
  aa:	83 e5       	ldi	r24, 0x53	; 83
  ac:	8c bd       	out	0x2c, r24	; 44
  ae:	08 95       	ret

000000b0 <xmit_spi>:
  b0:	8e bd       	out	0x2e, r24	; 46
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <xmit_spi+0x2>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
  b8:	8e b5       	in	r24, 0x2e	; 46
  ba:	08 95       	ret

000000bc <rcv_spi>:
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	DRESULT res;
	WORD bc;
	static WORD wc;


	res = RES_ERROR;
  c2:	08 95       	ret

000000c4 <send_cmd>:
  c4:	ff 92       	push	r15
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	/* Wait ready */
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	c8 2f       	mov	r28, r24
  d0:	d4 2f       	mov	r29, r20
  d2:	15 2f       	mov	r17, r21
  d4:	06 2f       	mov	r16, r22
  d6:	f7 2e       	mov	r15, r23
  d8:	88 23       	and	r24, r24
  da:	4c f4       	brge	.+18     	; 0xee <send_cmd+0x2a>
  dc:	40 e0       	ldi	r20, 0x00	; 0
				if (bc) res = RES_OK;
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	ba 01       	movw	r22, r20
  e2:	87 e7       	ldi	r24, 0x77	; 119
  e4:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
			}
			release_spi();
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	40 f5       	brcc	.+80     	; 0x13c <send_cmd+0x78>
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
  ec:	cf 77       	andi	r28, 0x7F	; 127
  ee:	2a 9a       	sbi	0x05, 2	; 5
  f0:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
  f4:	2a 98       	cbi	0x05, 2	; 5
  f6:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
			release_spi();
		}
	}

	return res;
}
  fa:	8c 2f       	mov	r24, r28
  fc:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
 100:	8f 2d       	mov	r24, r15
 102:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
 106:	80 2f       	mov	r24, r16
 108:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 10c:	81 2f       	mov	r24, r17
 10e:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
 112:	8d 2f       	mov	r24, r29
 114:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 118:	c0 34       	cpi	r28, 0x40	; 64
 11a:	21 f0       	breq	.+8      	; 0x124 <send_cmd+0x60>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 11c:	c8 34       	cpi	r28, 0x48	; 72
 11e:	21 f4       	brne	.+8      	; 0x128 <send_cmd+0x64>
 120:	87 e8       	ldi	r24, 0x87	; 135
 122:	03 c0       	rjmp	.+6      	; 0x12a <send_cmd+0x66>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 124:	85 e9       	ldi	r24, 0x95	; 149
 126:	01 c0       	rjmp	.+2      	; 0x12a <send_cmd+0x66>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
 128:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
 12a:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
 12e:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
 130:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
	} while ((res & 0x80) && --n);
 134:	88 23       	and	r24, r24
 136:	14 f4       	brge	.+4      	; 0x13c <send_cmd+0x78>
 138:	c1 50       	subi	r28, 0x01	; 1
 13a:	d1 f7       	brne	.-12     	; 0x130 <send_cmd+0x6c>

	return res;			/* Return with the response value */
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	08 95       	ret

00000148 <release_spi>:
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
 148:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
 14a:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 14e:	08 95       	ret

00000150 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <disk_initialize+0x12>
 162:	00 d0       	rcall	.+0      	; 0x164 <disk_initialize+0x14>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;

	init_spi();
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <init_spi>
 16c:	14 e6       	ldi	r17, 0x64	; 100

//#if _WRITE_FUNC
//	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
//#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */
 16e:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 172:	11 50       	subi	r17, 0x01	; 1
 174:	e1 f7       	brne	.-8      	; 0x16e <disk_initialize+0x1e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	ba 01       	movw	r22, r20
 17c:	80 e4       	ldi	r24, 0x40	; 64
 17e:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	09 f0       	breq	.+2      	; 0x188 <disk_initialize+0x38>
 186:	7d c0       	rjmp	.+250    	; 0x282 <disk_initialize+0x132>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
 188:	4a ea       	ldi	r20, 0xAA	; 170
 18a:	51 e0       	ldi	r21, 0x01	; 1
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	88 e4       	ldi	r24, 0x48	; 72
 192:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	09 f0       	breq	.+2      	; 0x19c <disk_initialize+0x4c>
 19a:	42 c0       	rjmp	.+132    	; 0x220 <disk_initialize+0xd0>
 19c:	ce 01       	movw	r24, r28
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	7c 01       	movw	r14, r24
 1a2:	6e 01       	movw	r12, r28
 1a4:	95 e0       	ldi	r25, 0x05	; 5
 1a6:	c9 0e       	add	r12, r25
 1a8:	d1 1c       	adc	r13, r1
 1aa:	87 01       	movw	r16, r14
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
 1ac:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 1b0:	f8 01       	movw	r30, r16
 1b2:	81 93       	st	Z+, r24
 1b4:	8f 01       	movw	r16, r30
 1b6:	ec 15       	cp	r30, r12
 1b8:	fd 05       	cpc	r31, r13
 1ba:	c1 f7       	brne	.-16     	; 0x1ac <disk_initialize+0x5c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
 1bc:	8b 81       	ldd	r24, Y+3	; 0x03
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <disk_initialize+0x74>
 1c2:	61 c0       	rjmp	.+194    	; 0x286 <disk_initialize+0x136>
 1c4:	8c 81       	ldd	r24, Y+4	; 0x04
 1c6:	8a 3a       	cpi	r24, 0xAA	; 170
 1c8:	31 f0       	breq	.+12     	; 0x1d6 <disk_initialize+0x86>
//#if _WRITE_FUNC
//	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
//#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */

	ty = 0;
 1ca:	f1 2c       	mov	r15, r1
 1cc:	6c c0       	rjmp	.+216    	; 0x2a6 <disk_initialize+0x156>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 1ce:	01 50       	subi	r16, 0x01	; 1
 1d0:	11 09       	sbc	r17, r1
 1d2:	19 f4       	brne	.+6      	; 0x1da <disk_initialize+0x8a>
 1d4:	5a c0       	rjmp	.+180    	; 0x28a <disk_initialize+0x13a>
 1d6:	00 ee       	ldi	r16, 0xE0	; 224
 1d8:	1e e2       	ldi	r17, 0x2E	; 46
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	70 e4       	ldi	r23, 0x40	; 64
 1e2:	89 ee       	ldi	r24, 0xE9	; 233
 1e4:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 1e8:	81 11       	cpse	r24, r1
 1ea:	f1 cf       	rjmp	.-30     	; 0x1ce <disk_initialize+0x7e>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 1ec:	01 2b       	or	r16, r17
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <disk_initialize+0xa2>
 1f0:	4e c0       	rjmp	.+156    	; 0x28e <disk_initialize+0x13e>
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	ba 01       	movw	r22, r20
 1f8:	8a e7       	ldi	r24, 0x7A	; 122
 1fa:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 1fe:	81 11       	cpse	r24, r1
 200:	48 c0       	rjmp	.+144    	; 0x292 <disk_initialize+0x142>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
 202:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 206:	f7 01       	movw	r30, r14
 208:	81 93       	st	Z+, r24
 20a:	7f 01       	movw	r14, r30
 20c:	ec 15       	cp	r30, r12
 20e:	fd 05       	cpc	r31, r13
 210:	c1 f7       	brne	.-16     	; 0x202 <disk_initialize+0xb2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	86 fd       	sbrc	r24, 6
 216:	3f c0       	rjmp	.+126    	; 0x296 <disk_initialize+0x146>
 218:	68 94       	set
 21a:	ff 24       	eor	r15, r15
 21c:	f2 f8       	bld	r15, 2
 21e:	43 c0       	rjmp	.+134    	; 0x2a6 <disk_initialize+0x156>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	ba 01       	movw	r22, r20
 226:	89 ee       	ldi	r24, 0xE9	; 233
 228:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	38 f0       	brcs	.+14     	; 0x23e <disk_initialize+0xee>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 230:	ff 24       	eor	r15, r15
 232:	f3 94       	inc	r15
 234:	0f 2e       	mov	r0, r31
 236:	f1 e4       	ldi	r31, 0x41	; 65
 238:	ef 2e       	mov	r14, r31
 23a:	f0 2d       	mov	r31, r0
 23c:	07 c0       	rjmp	.+14     	; 0x24c <disk_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 23e:	68 94       	set
 240:	ff 24       	eor	r15, r15
 242:	f1 f8       	bld	r15, 1
 244:	0f 2e       	mov	r0, r31
 246:	f9 ee       	ldi	r31, 0xE9	; 233
 248:	ef 2e       	mov	r14, r31
 24a:	f0 2d       	mov	r31, r0
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
 24c:	08 ea       	ldi	r16, 0xA8	; 168
 24e:	11 e6       	ldi	r17, 0x61	; 97
 250:	03 c0       	rjmp	.+6      	; 0x258 <disk_initialize+0x108>
 252:	01 50       	subi	r16, 0x01	; 1
 254:	11 09       	sbc	r17, r1
 256:	21 f1       	breq	.+72     	; 0x2a0 <disk_initialize+0x150>
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	ba 01       	movw	r22, r20
 25e:	8e 2d       	mov	r24, r14
 260:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 264:	81 11       	cpse	r24, r1
 266:	f5 cf       	rjmp	.-22     	; 0x252 <disk_initialize+0x102>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 268:	01 2b       	or	r16, r17
 26a:	e1 f0       	breq	.+56     	; 0x2a4 <disk_initialize+0x154>
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	52 e0       	ldi	r21, 0x02	; 2
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e5       	ldi	r24, 0x50	; 80
 276:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 27a:	88 23       	and	r24, r24
 27c:	a1 f0       	breq	.+40     	; 0x2a6 <disk_initialize+0x156>
				ty = 0;
 27e:	f1 2c       	mov	r15, r1
 280:	12 c0       	rjmp	.+36     	; 0x2a6 <disk_initialize+0x156>
//#if _WRITE_FUNC
//	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
//#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */

	ty = 0;
 282:	f1 2c       	mov	r15, r1
 284:	10 c0       	rjmp	.+32     	; 0x2a6 <disk_initialize+0x156>
 286:	f1 2c       	mov	r15, r1
 288:	0e c0       	rjmp	.+28     	; 0x2a6 <disk_initialize+0x156>
 28a:	f1 2c       	mov	r15, r1
 28c:	0c c0       	rjmp	.+24     	; 0x2a6 <disk_initialize+0x156>
 28e:	f1 2c       	mov	r15, r1
 290:	0a c0       	rjmp	.+20     	; 0x2a6 <disk_initialize+0x156>
 292:	f1 2c       	mov	r15, r1
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <disk_initialize+0x156>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
 296:	0f 2e       	mov	r0, r31
 298:	fc e0       	ldi	r31, 0x0C	; 12
 29a:	ff 2e       	mov	r15, r31
 29c:	f0 2d       	mov	r31, r0
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <disk_initialize+0x156>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
 2a0:	f1 2c       	mov	r15, r1
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <disk_initialize+0x156>
 2a4:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
 2a6:	f0 92 86 01 	sts	0x0186, r15
	release_spi();
 2aa:	0e 94 a4 00 	call	0x148	; 0x148 <release_spi>

	return ty ? 0 : STA_NOINIT;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	f1 10       	cpse	r15, r1
 2b2:	80 e0       	ldi	r24, 0x00	; 0
}
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	08 95       	ret

000002ce <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
 2ce:	cf 92       	push	r12
 2d0:	df 92       	push	r13
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	7c 01       	movw	r14, r24
 2e0:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
 2e2:	80 91 86 01 	lds	r24, 0x0186
 2e6:	83 fd       	sbrc	r24, 3
 2e8:	09 c0       	rjmp	.+18     	; 0x2fc <disk_readp+0x2e>
 2ea:	03 2e       	mov	r0, r19
 2ec:	39 e0       	ldi	r19, 0x09	; 9
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	66 1f       	adc	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	3a 95       	dec	r19
 2f8:	d1 f7       	brne	.-12     	; 0x2ee <disk_readp+0x20>
 2fa:	30 2d       	mov	r19, r0

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
 2fc:	81 e5       	ldi	r24, 0x51	; 81
 2fe:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 302:	81 11       	cpse	r24, r1
 304:	34 c0       	rjmp	.+104    	; 0x36e <disk_readp+0xa0>
 306:	c0 e3       	ldi	r28, 0x30	; 48
 308:	d5 e7       	ldi	r29, 0x75	; 117

		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
 30a:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
		} while (rc == 0xFF && --bc);
 30e:	8f 3f       	cpi	r24, 0xFF	; 255
 310:	21 f4       	brne	.+8      	; 0x31a <disk_readp+0x4c>
 312:	21 97       	sbiw	r28, 0x01	; 1
 314:	d1 f7       	brne	.-12     	; 0x30a <disk_readp+0x3c>
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */

	res = RES_ERROR;
 316:	c1 e0       	ldi	r28, 0x01	; 1
 318:	2d c0       	rjmp	.+90     	; 0x374 <disk_readp+0xa6>
		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
 31a:	8e 3f       	cpi	r24, 0xFE	; 254
 31c:	51 f5       	brne	.+84     	; 0x372 <disk_readp+0xa4>
 31e:	c2 e0       	ldi	r28, 0x02	; 2
 320:	d2 e0       	ldi	r29, 0x02	; 2
 322:	c0 1b       	sub	r28, r16
 324:	d1 0b       	sbc	r29, r17
			bc = 514 - ofs - cnt;
 326:	cc 19       	sub	r28, r12
 328:	dd 09       	sbc	r29, r13

			/* Skip leading bytes */
			if (ofs) {
 32a:	c1 14       	cp	r12, r1
 32c:	d1 04       	cpc	r13, r1
 32e:	31 f0       	breq	.+12     	; 0x33c <disk_readp+0x6e>
				do rcv_spi(); while (--ofs);
 330:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	c8 1a       	sub	r12, r24
 338:	d1 08       	sbc	r13, r1
 33a:	d1 f7       	brne	.-12     	; 0x330 <disk_readp+0x62>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
 33c:	e1 14       	cp	r14, r1
 33e:	f1 04       	cpc	r15, r1
 340:	49 f0       	breq	.+18     	; 0x354 <disk_readp+0x86>
				do
					*buff++ = rcv_spi();
 342:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 346:	f7 01       	movw	r30, r14
 348:	81 93       	st	Z+, r24
 34a:	7f 01       	movw	r14, r30
				while (--cnt);
 34c:	01 50       	subi	r16, 0x01	; 1
 34e:	11 09       	sbc	r17, r1
 350:	c1 f7       	brne	.-16     	; 0x342 <disk_readp+0x74>
 352:	07 c0       	rjmp	.+14     	; 0x362 <disk_readp+0x94>
			} else {	/* Forward data to the outgoing stream (depends on the project) */
			do
				transmitByte(rcv_spi());	/* (Console output) */
 354:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 358:	0e 94 79 06 	call	0xcf2	; 0xcf2 <transmitByte>
				while (--cnt);
 35c:	01 50       	subi	r16, 0x01	; 1
 35e:	11 09       	sbc	r17, r1
 360:	c9 f7       	brne	.-14     	; 0x354 <disk_readp+0x86>
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
 362:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 366:	21 97       	sbiw	r28, 0x01	; 1
 368:	e1 f7       	brne	.-8      	; 0x362 <disk_readp+0x94>

			res = RES_OK;
 36a:	c0 e0       	ldi	r28, 0x00	; 0
 36c:	03 c0       	rjmp	.+6      	; 0x374 <disk_readp+0xa6>
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */

	res = RES_ERROR;
 36e:	c1 e0       	ldi	r28, 0x01	; 1
 370:	01 c0       	rjmp	.+2      	; 0x374 <disk_readp+0xa6>
 372:	c1 e0       	ldi	r28, 0x01	; 1

			res = RES_OK;
		}
	}

	release_spi();
 374:	0e 94 a4 00 	call	0x148	; 0x148 <release_spi>

	return res;
}
 378:	8c 2f       	mov	r24, r28
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	df 90       	pop	r13
 388:	cf 90       	pop	r12
 38a:	08 95       	ret

0000038c <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
	FATFS *fs = FatFs;
 390:	e0 91 87 01 	lds	r30, 0x0187
 394:	f0 91 88 01 	lds	r31, 0x0188


	clst -= 2;
 398:	9c 01       	movw	r18, r24
 39a:	22 50       	subi	r18, 0x02	; 2
 39c:	31 09       	sbc	r19, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 39e:	46 81       	ldd	r20, Z+6	; 0x06
 3a0:	57 81       	ldd	r21, Z+7	; 0x07
 3a2:	42 50       	subi	r20, 0x02	; 2
 3a4:	51 09       	sbc	r21, r1
 3a6:	24 17       	cp	r18, r20
 3a8:	35 07       	cpc	r19, r21
 3aa:	68 f4       	brcc	.+26     	; 0x3c6 <clust2sect+0x3a>
	return (DWORD)clst * fs->csize + fs->database;
 3ac:	a2 81       	ldd	r26, Z+2	; 0x02
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	0e 94 69 07 	call	0xed2	; 0xed2 <__umulhisi3>
 3b4:	00 89       	ldd	r16, Z+16	; 0x10
 3b6:	11 89       	ldd	r17, Z+17	; 0x11
 3b8:	22 89       	ldd	r18, Z+18	; 0x12
 3ba:	33 89       	ldd	r19, Z+19	; 0x13
 3bc:	60 0f       	add	r22, r16
 3be:	71 1f       	adc	r23, r17
 3c0:	82 1f       	adc	r24, r18
 3c2:	93 1f       	adc	r25, r19
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <clust2sect+0x40>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	fc 01       	movw	r30, r24
	CLUST clst;
	FATFS *fs = FatFs;
 3d8:	a0 91 87 01 	lds	r26, 0x0187
 3dc:	b0 91 88 01 	lds	r27, 0x0188


	dj->index = 0;
 3e0:	11 82       	std	Z+1, r1	; 0x01
 3e2:	10 82       	st	Z, r1
	clst = dj->sclust;
 3e4:	84 81       	ldd	r24, Z+4	; 0x04
 3e6:	95 81       	ldd	r25, Z+5	; 0x05
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	91 05       	cpc	r25, r1
 3ec:	d9 f0       	breq	.+54     	; 0x424 <dir_rewind+0x52>
 3ee:	16 96       	adiw	r26, 0x06	; 6
 3f0:	2d 91       	ld	r18, X+
 3f2:	3c 91       	ld	r19, X
 3f4:	17 97       	sbiw	r26, 0x07	; 7
 3f6:	82 17       	cp	r24, r18
 3f8:	93 07       	cpc	r25, r19
 3fa:	b0 f4       	brcc	.+44     	; 0x428 <dir_rewind+0x56>
 3fc:	ef 01       	movw	r28, r30
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32))	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
 3fe:	97 83       	std	Z+7, r25	; 0x07
 400:	86 83       	std	Z+6, r24	; 0x06
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
 402:	00 97       	sbiw	r24, 0x00	; 0
 404:	19 f0       	breq	.+6      	; 0x40c <dir_rewind+0x3a>
 406:	0e 94 c6 01 	call	0x38c	; 0x38c <clust2sect>
 40a:	06 c0       	rjmp	.+12     	; 0x418 <dir_rewind+0x46>
 40c:	1c 96       	adiw	r26, 0x0c	; 12
 40e:	6d 91       	ld	r22, X+
 410:	7d 91       	ld	r23, X+
 412:	8d 91       	ld	r24, X+
 414:	9c 91       	ld	r25, X
 416:	1f 97       	sbiw	r26, 0x0f	; 15
 418:	68 87       	std	Y+8, r22	; 0x08
 41a:	79 87       	std	Y+9, r23	; 0x09
 41c:	8a 87       	std	Y+10, r24	; 0x0a
 41e:	9b 87       	std	Y+11, r25	; 0x0b

	return FR_OK;	/* Seek succeeded */
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	03 c0       	rjmp	.+6      	; 0x42a <dir_rewind+0x58>


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	01 c0       	rjmp	.+2      	; 0x42a <dir_rewind+0x58>
 428:	81 e0       	ldi	r24, 0x01	; 1
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 430:	cf 92       	push	r12
 432:	df 92       	push	r13
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	ec 01       	movw	r28, r24
 442:	6a 01       	movw	r12, r20
 444:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
 446:	02 e0       	ldi	r16, 0x02	; 2
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	2e ef       	ldi	r18, 0xFE	; 254
 44c:	31 e0       	ldi	r19, 0x01	; 1
 44e:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
 452:	81 11       	cpse	r24, r1
 454:	1e c0       	rjmp	.+60     	; 0x492 <check_fs+0x62>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	98 2f       	mov	r25, r24
 45c:	88 27       	eor	r24, r24
 45e:	28 81       	ld	r18, Y
 460:	82 2b       	or	r24, r18
 462:	85 35       	cpi	r24, 0x55	; 85
 464:	9a 4a       	sbci	r25, 0xAA	; 170
 466:	b9 f4       	brne	.+46     	; 0x496 <check_fs+0x66>
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
 468:	26 e3       	ldi	r18, 0x36	; 54
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	b7 01       	movw	r22, r14
 46e:	a6 01       	movw	r20, r12
 470:	ce 01       	movw	r24, r28
 472:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
 476:	81 11       	cpse	r24, r1
 478:	10 c0       	rjmp	.+32     	; 0x49a <check_fs+0x6a>
 47a:	29 81       	ldd	r18, Y+1	; 0x01
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	32 2f       	mov	r19, r18
 480:	22 27       	eor	r18, r18
 482:	88 81       	ld	r24, Y
 484:	28 2b       	or	r18, r24
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	26 34       	cpi	r18, 0x46	; 70
 48a:	31 44       	sbci	r19, 0x41	; 65
 48c:	39 f4       	brne	.+14     	; 0x49c <check_fs+0x6c>
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	05 c0       	rjmp	.+10     	; 0x49c <check_fs+0x6c>
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
		return 3;
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	03 c0       	rjmp	.+6      	; 0x49c <check_fs+0x6c>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	01 c0       	rjmp	.+2      	; 0x49c <check_fs+0x6c>

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
 49a:	81 e0       	ldi	r24, 0x01	; 1
}
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	ff 90       	pop	r15
 4a6:	ef 90       	pop	r14
 4a8:	df 90       	pop	r13
 4aa:	cf 90       	pop	r12
 4ac:	08 95       	ret

000004ae <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	00 d0       	rcall	.+0      	; 0x4b8 <get_fat+0xa>
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <get_fat+0xc>
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
	BYTE buf[4];
	FATFS *fs = FatFs;
 4be:	e0 91 87 01 	lds	r30, 0x0187
 4c2:	f0 91 88 01 	lds	r31, 0x0188

	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
 4c6:	82 30       	cpi	r24, 0x02	; 2
 4c8:	91 05       	cpc	r25, r1
 4ca:	28 f1       	brcs	.+74     	; 0x516 <get_fat+0x68>
 4cc:	26 81       	ldd	r18, Z+6	; 0x06
 4ce:	37 81       	ldd	r19, Z+7	; 0x07
 4d0:	82 17       	cp	r24, r18
 4d2:	93 07       	cpc	r25, r19
 4d4:	18 f5       	brcc	.+70     	; 0x51c <get_fat+0x6e>
		return 1;

	switch (fs->fs_type) {
 4d6:	20 81       	ld	r18, Z
 4d8:	22 30       	cpi	r18, 0x02	; 2
 4da:	19 f5       	brne	.+70     	; 0x522 <get_fat+0x74>
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
	}
#endif
#if _FS_FAT16
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
 4dc:	9c 01       	movw	r18, r24
 4de:	33 27       	eor	r19, r19
 4e0:	22 0f       	add	r18, r18
 4e2:	33 1f       	adc	r19, r19
 4e4:	89 2f       	mov	r24, r25
 4e6:	99 27       	eor	r25, r25
 4e8:	40 85       	ldd	r20, Z+8	; 0x08
 4ea:	51 85       	ldd	r21, Z+9	; 0x09
 4ec:	62 85       	ldd	r22, Z+10	; 0x0a
 4ee:	73 85       	ldd	r23, Z+11	; 0x0b
 4f0:	48 0f       	add	r20, r24
 4f2:	59 1f       	adc	r21, r25
 4f4:	61 1d       	adc	r22, r1
 4f6:	71 1d       	adc	r23, r1
 4f8:	02 e0       	ldi	r16, 0x02	; 2
 4fa:	10 e0       	ldi	r17, 0x00	; 0
 4fc:	ce 01       	movw	r24, r28
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
 504:	81 11       	cpse	r24, r1
 506:	10 c0       	rjmp	.+32     	; 0x528 <get_fat+0x7a>
		return LD_WORD(buf);
 508:	8a 81       	ldd	r24, Y+2	; 0x02
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	98 2f       	mov	r25, r24
 50e:	88 27       	eor	r24, r24
 510:	29 81       	ldd	r18, Y+1	; 0x01
 512:	82 2b       	or	r24, r18
 514:	0b c0       	rjmp	.+22     	; 0x52c <get_fat+0x7e>
{
	BYTE buf[4];
	FATFS *fs = FatFs;

	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
		return 1;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	08 c0       	rjmp	.+16     	; 0x52c <get_fat+0x7e>
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	05 c0       	rjmp	.+10     	; 0x52c <get_fat+0x7e>
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <get_fat+0x7e>
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
}
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	08 95       	ret

0000053e <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object */
)
{
 53e:	4f 92       	push	r4
 540:	5f 92       	push	r5
 542:	6f 92       	push	r6
 544:	7f 92       	push	r7
 546:	8f 92       	push	r8
 548:	9f 92       	push	r9
 54a:	af 92       	push	r10
 54c:	bf 92       	push	r11
 54e:	ef 92       	push	r14
 550:	ff 92       	push	r15
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	a8 97       	sbiw	r28, 0x28	; 40
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	f8 94       	cli
 564:	de bf       	out	0x3e, r29	; 62
 566:	0f be       	out	0x3f, r0	; 63
 568:	cd bf       	out	0x3d, r28	; 61
 56a:	7c 01       	movw	r14, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
 56c:	10 92 88 01 	sts	0x0188, r1
 570:	10 92 87 01 	sts	0x0187, r1

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
 574:	0e 94 a8 00 	call	0x150	; 0x150 <disk_initialize>
 578:	80 fd       	sbrc	r24, 0
 57a:	f5 c0       	rjmp	.+490    	; 0x766 <pf_mount+0x228>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	50 e0       	ldi	r21, 0x00	; 0
 580:	ba 01       	movw	r22, r20
 582:	ce 01       	movw	r24, r28
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	0e 94 18 02 	call	0x430	; 0x430 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	89 f5       	brne	.+98     	; 0x5f0 <pf_mount+0xb2>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
 58e:	00 e1       	ldi	r16, 0x10	; 16
 590:	10 e0       	ldi	r17, 0x00	; 0
 592:	2e eb       	ldi	r18, 0xBE	; 190
 594:	31 e0       	ldi	r19, 0x01	; 1
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	ba 01       	movw	r22, r20
 59c:	ce 01       	movw	r24, r28
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
 5a4:	81 11       	cpse	r24, r1
 5a6:	e1 c0       	rjmp	.+450    	; 0x76a <pf_mount+0x22c>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
 5a8:	8d 81       	ldd	r24, Y+5	; 0x05
 5aa:	88 23       	and	r24, r24
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <pf_mount+0x72>
 5ae:	df c0       	rjmp	.+446    	; 0x76e <pf_mount+0x230>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
 5b0:	8c 85       	ldd	r24, Y+12	; 0x0c
 5b2:	8b 84       	ldd	r8, Y+11	; 0x0b
 5b4:	91 2c       	mov	r9, r1
 5b6:	a1 2c       	mov	r10, r1
 5b8:	b1 2c       	mov	r11, r1
 5ba:	54 01       	movw	r10, r8
 5bc:	99 24       	eor	r9, r9
 5be:	88 24       	eor	r8, r8
 5c0:	b8 2a       	or	r11, r24
 5c2:	89 85       	ldd	r24, Y+9	; 0x09
 5c4:	a5 01       	movw	r20, r10
 5c6:	94 01       	movw	r18, r8
 5c8:	28 2b       	or	r18, r24
 5ca:	da 01       	movw	r26, r20
 5cc:	c9 01       	movw	r24, r18
 5ce:	8a 84       	ldd	r8, Y+10	; 0x0a
 5d0:	91 2c       	mov	r9, r1
 5d2:	98 2c       	mov	r9, r8
 5d4:	88 24       	eor	r8, r8
 5d6:	a1 2c       	mov	r10, r1
 5d8:	b1 2c       	mov	r11, r1
 5da:	88 2a       	or	r8, r24
 5dc:	99 2a       	or	r9, r25
 5de:	aa 2a       	or	r10, r26
 5e0:	bb 2a       	or	r11, r27
				fmt = check_fs(buf, bsect);	/* Check the partition */
 5e2:	b5 01       	movw	r22, r10
 5e4:	a4 01       	movw	r20, r8
 5e6:	ce 01       	movw	r24, r28
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	0e 94 18 02 	call	0x430	; 0x430 <check_fs>
 5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <pf_mount+0xb8>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
 5f0:	81 2c       	mov	r8, r1
 5f2:	91 2c       	mov	r9, r1
 5f4:	54 01       	movw	r10, r8
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 5f6:	83 30       	cpi	r24, 0x03	; 3
 5f8:	09 f4       	brne	.+2      	; 0x5fc <pf_mount+0xbe>
 5fa:	bb c0       	rjmp	.+374    	; 0x772 <pf_mount+0x234>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
 5fc:	81 11       	cpse	r24, r1
 5fe:	bb c0       	rjmp	.+374    	; 0x776 <pf_mount+0x238>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
 600:	04 e2       	ldi	r16, 0x24	; 36
 602:	10 e0       	ldi	r17, 0x00	; 0
 604:	2d e0       	ldi	r18, 0x0D	; 13
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	b5 01       	movw	r22, r10
 60a:	a4 01       	movw	r20, r8
 60c:	ce 01       	movw	r24, r28
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
 614:	81 11       	cpse	r24, r1
 616:	b1 c0       	rjmp	.+354    	; 0x77a <pf_mount+0x23c>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
 618:	2b 85       	ldd	r18, Y+11	; 0x0b
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	32 2f       	mov	r19, r18
 61e:	22 27       	eor	r18, r18
 620:	8a 85       	ldd	r24, Y+10	; 0x0a
 622:	28 2b       	or	r18, r24
 624:	40 e0       	ldi	r20, 0x00	; 0
 626:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
 628:	21 15       	cp	r18, r1
 62a:	31 05       	cpc	r19, r1
 62c:	41 05       	cpc	r20, r1
 62e:	51 05       	cpc	r21, r1
 630:	c1 f4       	brne	.+48     	; 0x662 <pf_mount+0x124>
 632:	8b 8d       	ldd	r24, Y+27	; 0x1b
 634:	2a 8d       	ldd	r18, Y+26	; 0x1a
 636:	42 2f       	mov	r20, r18
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	ba 01       	movw	r22, r20
 640:	55 27       	eor	r21, r21
 642:	44 27       	eor	r20, r20
 644:	78 2b       	or	r23, r24
 646:	88 8d       	ldd	r24, Y+24	; 0x18
 648:	48 2b       	or	r20, r24
 64a:	89 8d       	ldd	r24, Y+25	; 0x19
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	98 2f       	mov	r25, r24
 650:	88 27       	eor	r24, r24
 652:	a0 e0       	ldi	r26, 0x00	; 0
 654:	b0 e0       	ldi	r27, 0x00	; 0
 656:	9a 01       	movw	r18, r20
 658:	ab 01       	movw	r20, r22
 65a:	28 2b       	or	r18, r24
 65c:	39 2b       	or	r19, r25
 65e:	4a 2b       	or	r20, r26
 660:	5b 2b       	or	r21, r27

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
 662:	ac 81       	ldd	r26, Y+4	; 0x04
 664:	b0 e0       	ldi	r27, 0x00	; 0
 666:	0e 94 78 07 	call	0xef0	; 0xef0 <__muluhisi3>
 66a:	6d a3       	std	Y+37, r22	; 0x25
 66c:	7e a3       	std	Y+38, r23	; 0x26
 66e:	8f a3       	std	Y+39, r24	; 0x27
 670:	98 a7       	std	Y+40, r25	; 0x28
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
 672:	8b 81       	ldd	r24, Y+3	; 0x03
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	98 2f       	mov	r25, r24
 678:	88 27       	eor	r24, r24
 67a:	2a 81       	ldd	r18, Y+2	; 0x02
 67c:	82 2b       	or	r24, r18
 67e:	ac 01       	movw	r20, r24
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	84 0e       	add	r8, r20
 686:	95 1e       	adc	r9, r21
 688:	a6 1e       	adc	r10, r22
 68a:	b7 1e       	adc	r11, r23
 68c:	d7 01       	movw	r26, r14
 68e:	18 96       	adiw	r26, 0x08	; 8
 690:	8d 92       	st	X+, r8
 692:	9d 92       	st	X+, r9
 694:	ad 92       	st	X+, r10
 696:	bc 92       	st	X, r11
 698:	1b 97       	sbiw	r26, 0x0b	; 11
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
 69a:	19 81       	ldd	r17, Y+1	; 0x01
 69c:	12 96       	adiw	r26, 0x02	; 2
 69e:	1c 93       	st	X, r17
 6a0:	12 97       	sbiw	r26, 0x02	; 2
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
 6a2:	ee 81       	ldd	r30, Y+6	; 0x06
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	fe 2f       	mov	r31, r30
 6a8:	ee 27       	eor	r30, r30
 6aa:	8d 81       	ldd	r24, Y+5	; 0x05
 6ac:	e8 2b       	or	r30, r24
 6ae:	15 96       	adiw	r26, 0x05	; 5
 6b0:	fc 93       	st	X, r31
 6b2:	ee 93       	st	-X, r30
 6b4:	14 97       	sbiw	r26, 0x04	; 4
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
 6b6:	88 85       	ldd	r24, Y+8	; 0x08
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	98 2f       	mov	r25, r24
 6bc:	88 27       	eor	r24, r24
 6be:	2f 81       	ldd	r18, Y+7	; 0x07
 6c0:	82 2b       	or	r24, r18
 6c2:	a0 e0       	ldi	r26, 0x00	; 0
 6c4:	b0 e0       	ldi	r27, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
 6c6:	00 97       	sbiw	r24, 0x00	; 0
 6c8:	a1 05       	cpc	r26, r1
 6ca:	b1 05       	cpc	r27, r1
 6cc:	b1 f4       	brne	.+44     	; 0x6fa <pf_mount+0x1bc>
 6ce:	2f 89       	ldd	r18, Y+23	; 0x17
 6d0:	8e 89       	ldd	r24, Y+22	; 0x16
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	a0 e0       	ldi	r26, 0x00	; 0
 6d6:	b0 e0       	ldi	r27, 0x00	; 0
 6d8:	dc 01       	movw	r26, r24
 6da:	99 27       	eor	r25, r25
 6dc:	88 27       	eor	r24, r24
 6de:	b2 2b       	or	r27, r18
 6e0:	2c 89       	ldd	r18, Y+20	; 0x14
 6e2:	82 2b       	or	r24, r18
 6e4:	2d 89       	ldd	r18, Y+21	; 0x15
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	32 2f       	mov	r19, r18
 6ea:	22 27       	eor	r18, r18
 6ec:	29 01       	movw	r4, r18
 6ee:	61 2c       	mov	r6, r1
 6f0:	71 2c       	mov	r7, r1
 6f2:	84 29       	or	r24, r4
 6f4:	95 29       	or	r25, r5
 6f6:	a6 29       	or	r26, r6
 6f8:	b7 29       	or	r27, r7
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
 6fa:	f2 95       	swap	r31
 6fc:	e2 95       	swap	r30
 6fe:	ef 70       	andi	r30, 0x0F	; 15
 700:	ef 27       	eor	r30, r31
 702:	ff 70       	andi	r31, 0x0F	; 15
 704:	ef 27       	eor	r30, r31
 706:	2f 01       	movw	r4, r30
 708:	61 2c       	mov	r6, r1
 70a:	71 2c       	mov	r7, r1
 70c:	84 1b       	sub	r24, r20
 70e:	95 0b       	sbc	r25, r21
 710:	a6 0b       	sbc	r26, r22
 712:	b7 0b       	sbc	r27, r23
 714:	2d a1       	ldd	r18, Y+37	; 0x25
 716:	3e a1       	ldd	r19, Y+38	; 0x26
 718:	4f a1       	ldd	r20, Y+39	; 0x27
 71a:	58 a5       	ldd	r21, Y+40	; 0x28
 71c:	82 1b       	sub	r24, r18
 71e:	93 0b       	sbc	r25, r19
 720:	a4 0b       	sbc	r26, r20
 722:	b5 0b       	sbc	r27, r21
 724:	bc 01       	movw	r22, r24
 726:	cd 01       	movw	r24, r26
 728:	64 19       	sub	r22, r4
 72a:	75 09       	sbc	r23, r5
 72c:	86 09       	sbc	r24, r6
 72e:	97 09       	sbc	r25, r7
		) / fs->csize + 2;
 730:	21 2f       	mov	r18, r17
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	40 e0       	ldi	r20, 0x00	; 0
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	0e 94 47 07 	call	0xe8e	; 0xe8e <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
 73c:	da 01       	movw	r26, r20
 73e:	c9 01       	movw	r24, r18
 740:	02 96       	adiw	r24, 0x02	; 2
 742:	a1 1d       	adc	r26, r1
 744:	b1 1d       	adc	r27, r1
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
 746:	f7 01       	movw	r30, r14
 748:	97 83       	std	Z+7, r25	; 0x07
 74a:	86 83       	std	Z+6, r24	; 0x06

	fmt = 0;							/* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
 74c:	da 01       	movw	r26, r20
 74e:	c9 01       	movw	r24, r18
 750:	86 5f       	subi	r24, 0xF6	; 246
 752:	9f 40       	sbci	r25, 0x0F	; 15
 754:	a1 09       	sbc	r26, r1
 756:	b1 09       	sbc	r27, r1
 758:	8f 3f       	cpi	r24, 0xFF	; 255
 75a:	9f 4e       	sbci	r25, 0xEF	; 239
 75c:	a1 05       	cpc	r26, r1
 75e:	b1 05       	cpc	r27, r1
 760:	70 f0       	brcs	.+28     	; 0x77e <pf_mount+0x240>
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
		fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
 762:	86 e0       	ldi	r24, 0x06	; 6
 764:	2c c0       	rjmp	.+88     	; 0x7be <pf_mount+0x280>


	FatFs = 0;

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
 766:	82 e0       	ldi	r24, 0x02	; 2
 768:	2a c0       	rjmp	.+84     	; 0x7be <pf_mount+0x280>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	28 c0       	rjmp	.+80     	; 0x7be <pf_mount+0x280>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
 76e:	86 e0       	ldi	r24, 0x06	; 6
 770:	26 c0       	rjmp	.+76     	; 0x7be <pf_mount+0x280>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	24 c0       	rjmp	.+72     	; 0x7be <pf_mount+0x280>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
 776:	86 e0       	ldi	r24, 0x06	; 6
 778:	22 c0       	rjmp	.+68     	; 0x7be <pf_mount+0x280>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	20 c0       	rjmp	.+64     	; 0x7be <pf_mount+0x280>
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
		fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
	fs->fs_type = fmt;
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	d7 01       	movw	r26, r14
 782:	8c 93       	st	X, r24

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 784:	2d a1       	ldd	r18, Y+37	; 0x25
 786:	3e a1       	ldd	r19, Y+38	; 0x26
 788:	4f a1       	ldd	r20, Y+39	; 0x27
 78a:	58 a5       	ldd	r21, Y+40	; 0x28
 78c:	82 0e       	add	r8, r18
 78e:	93 1e       	adc	r9, r19
 790:	a4 1e       	adc	r10, r20
 792:	b5 1e       	adc	r11, r21
 794:	1c 96       	adiw	r26, 0x0c	; 12
 796:	8d 92       	st	X+, r8
 798:	9d 92       	st	X+, r9
 79a:	ad 92       	st	X+, r10
 79c:	bc 92       	st	X, r11
 79e:	1f 97       	sbiw	r26, 0x0f	; 15
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
 7a0:	84 0c       	add	r8, r4
 7a2:	95 1c       	adc	r9, r5
 7a4:	a6 1c       	adc	r10, r6
 7a6:	b7 1c       	adc	r11, r7
 7a8:	f7 01       	movw	r30, r14
 7aa:	80 8a       	std	Z+16, r8	; 0x10
 7ac:	91 8a       	std	Z+17, r9	; 0x11
 7ae:	a2 8a       	std	Z+18, r10	; 0x12
 7b0:	b3 8a       	std	Z+19, r11	; 0x13

	fs->flag = 0;
 7b2:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
 7b4:	f0 92 88 01 	sts	0x0188, r15
 7b8:	e0 92 87 01 	sts	0x0187, r14

	return FR_OK;
 7bc:	80 e0       	ldi	r24, 0x00	; 0
}
 7be:	a8 96       	adiw	r28, 0x28	; 40
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	f8 94       	cli
 7c4:	de bf       	out	0x3e, r29	; 62
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	cd bf       	out	0x3d, r28	; 61
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	ff 90       	pop	r15
 7d4:	ef 90       	pop	r14
 7d6:	bf 90       	pop	r11
 7d8:	af 90       	pop	r10
 7da:	9f 90       	pop	r9
 7dc:	8f 90       	pop	r8
 7de:	7f 90       	pop	r7
 7e0:	6f 90       	pop	r6
 7e2:	5f 90       	pop	r5
 7e4:	4f 90       	pop	r4
 7e6:	08 95       	ret

000007e8 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
 7e8:	2f 92       	push	r2
 7ea:	3f 92       	push	r3
 7ec:	4f 92       	push	r4
 7ee:	5f 92       	push	r5
 7f0:	6f 92       	push	r6
 7f2:	7f 92       	push	r7
 7f4:	8f 92       	push	r8
 7f6:	9f 92       	push	r9
 7f8:	af 92       	push	r10
 7fa:	bf 92       	push	r11
 7fc:	cf 92       	push	r12
 7fe:	df 92       	push	r13
 800:	ef 92       	push	r14
 802:	ff 92       	push	r15
 804:	0f 93       	push	r16
 806:	1f 93       	push	r17
 808:	cf 93       	push	r28
 80a:	df 93       	push	r29
 80c:	cd b7       	in	r28, 0x3d	; 61
 80e:	de b7       	in	r29, 0x3e	; 62
 810:	e8 97       	sbiw	r28, 0x38	; 56
 812:	0f b6       	in	r0, 0x3f	; 63
 814:	f8 94       	cli
 816:	de bf       	out	0x3e, r29	; 62
 818:	0f be       	out	0x3f, r0	; 63
 81a:	cd bf       	out	0x3d, r28	; 61
 81c:	6c 01       	movw	r12, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
 81e:	a0 90 87 01 	lds	r10, 0x0187
 822:	b0 90 88 01 	lds	r11, 0x0188


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
 826:	a1 14       	cp	r10, r1
 828:	b1 04       	cpc	r11, r1
 82a:	09 f4       	brne	.+2      	; 0x82e <pf_open+0x46>
 82c:	2f c1       	rjmp	.+606    	; 0xa8c <__stack+0x18d>

	fs->flag = 0;
 82e:	f5 01       	movw	r30, r10
 830:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
 832:	ce 01       	movw	r24, r28
 834:	0d 96       	adiw	r24, 0x0d	; 13
 836:	9c 83       	std	Y+4, r25	; 0x04
 838:	8b 83       	std	Y+3, r24	; 0x03
)
{
	FRESULT res;


	while (*path == ' ') path++;		/* Strip leading spaces */
 83a:	f6 01       	movw	r30, r12
 83c:	80 81       	ld	r24, Z
 83e:	80 32       	cpi	r24, 0x20	; 32
 840:	29 f4       	brne	.+10     	; 0x84c <pf_open+0x64>
 842:	31 96       	adiw	r30, 0x01	; 1
 844:	6f 01       	movw	r12, r30
 846:	81 91       	ld	r24, Z+
 848:	80 32       	cpi	r24, 0x20	; 32
 84a:	e1 f3       	breq	.-8      	; 0x844 <pf_open+0x5c>
	if (*path == '/') path++;			/* Strip heading separator if exist */
 84c:	8f 32       	cpi	r24, 0x2F	; 47
 84e:	19 f4       	brne	.+6      	; 0x856 <pf_open+0x6e>
 850:	ff ef       	ldi	r31, 0xFF	; 255
 852:	cf 1a       	sub	r12, r31
 854:	df 0a       	sbc	r13, r31
	dj->sclust = 0;						/* Set start directory (always root dir) */
 856:	1e 82       	std	Y+6, r1	; 0x06
 858:	1d 82       	std	Y+5, r1	; 0x05

	if ((BYTE)*path < ' ') {			/* Null path means the root directory */
 85a:	f6 01       	movw	r30, r12
 85c:	80 81       	ld	r24, Z
 85e:	80 32       	cpi	r24, 0x20	; 32
 860:	38 f4       	brcc	.+14     	; 0x870 <pf_open+0x88>
		res = dir_rewind(dj);
 862:	ce 01       	movw	r24, r28
 864:	01 96       	adiw	r24, 0x01	; 1
 866:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <dir_rewind>
 86a:	98 2f       	mov	r25, r24
		dir[0] = 0;
 86c:	19 8e       	std	Y+25, r1	; 0x19
 86e:	da c0       	rjmp	.+436    	; 0xa24 <__stack+0x125>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
 870:	68 94       	set
 872:	ff 24       	eor	r15, r15
 874:	f5 f8       	bld	r15, 5
 876:	61 2c       	mov	r6, r1
 878:	68 94       	set
 87a:	44 24       	eor	r4, r4
 87c:	43 f8       	bld	r4, 3
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
 87e:	34 2c       	mov	r3, r4
 880:	0f 2e       	mov	r0, r31
 882:	fb e0       	ldi	r31, 0x0B	; 11
 884:	2f 2e       	mov	r2, r31
 886:	f0 2d       	mov	r31, r0
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
 888:	55 24       	eor	r5, r5
 88a:	53 94       	inc	r5
	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
 88c:	e5 2c       	mov	r14, r5
 88e:	76 2c       	mov	r7, r6
	static const BYTE cvt[] = _EXCVT;
#endif
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
 890:	ab 81       	ldd	r26, Y+3	; 0x03
 892:	bc 81       	ldd	r27, Y+4	; 0x04
 894:	fd 01       	movw	r30, r26
 896:	cd 01       	movw	r24, r26
 898:	0b 96       	adiw	r24, 0x0b	; 11

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
 89a:	f1 92       	st	Z+, r15
 89c:	e8 17       	cp	r30, r24
 89e:	f9 07       	cpc	r31, r25
 8a0:	e1 f7       	brne	.-8      	; 0x89a <pf_open+0xb2>
 8a2:	96 2d       	mov	r25, r6
 8a4:	86 2d       	mov	r24, r6
 8a6:	34 2d       	mov	r19, r4
 8a8:	01 c0       	rjmp	.+2      	; 0x8ac <pf_open+0xc4>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
 8aa:	82 2f       	mov	r24, r18
 8ac:	21 e0       	ldi	r18, 0x01	; 1
 8ae:	28 0f       	add	r18, r24
 8b0:	f6 01       	movw	r30, r12
 8b2:	e8 0f       	add	r30, r24
 8b4:	f1 1d       	adc	r31, r1
 8b6:	80 81       	ld	r24, Z
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 8b8:	81 32       	cpi	r24, 0x21	; 33
 8ba:	68 f0       	brcs	.+26     	; 0x8d6 <pf_open+0xee>
 8bc:	8f 32       	cpi	r24, 0x2F	; 47
 8be:	59 f0       	breq	.+22     	; 0x8d6 <pf_open+0xee>
		if (c == '.' || i >= ni) {
 8c0:	8e 32       	cpi	r24, 0x2E	; 46
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <pf_open+0xde>
 8c4:	eb c0       	rjmp	.+470    	; 0xa9c <__stack+0x19d>
 8c6:	93 17       	cp	r25, r19
 8c8:	30 f4       	brcc	.+12     	; 0x8d6 <pf_open+0xee>
			sfn[i++] = d;
		} else
#endif
		{						/* Single byte code */
			if (_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
 8ca:	fd 01       	movw	r30, r26
 8cc:	e9 0f       	add	r30, r25
 8ce:	f1 1d       	adc	r31, r1
 8d0:	80 83       	st	Z, r24
 8d2:	9f 5f       	subi	r25, 0xFF	; 255
 8d4:	ea cf       	rjmp	.-44     	; 0x8aa <pf_open+0xc2>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
 8d6:	c2 0e       	add	r12, r18
 8d8:	d1 1c       	adc	r13, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
 8da:	95 2d       	mov	r25, r5
 8dc:	81 32       	cpi	r24, 0x21	; 33
 8de:	08 f0       	brcs	.+2      	; 0x8e2 <pf_open+0xfa>
 8e0:	96 2d       	mov	r25, r6
 8e2:	1b 96       	adiw	r26, 0x0b	; 11
 8e4:	9c 93       	st	X, r25
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
 8e6:	ce 01       	movw	r24, r28
 8e8:	01 96       	adiw	r24, 0x01	; 1
 8ea:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <dir_rewind>
 8ee:	98 2f       	mov	r25, r24
	if (res != FR_OK) return res;
 8f0:	81 11       	cpse	r24, r1
 8f2:	98 c0       	rjmp	.+304    	; 0xa24 <__stack+0x125>

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
 8f4:	29 81       	ldd	r18, Y+1	; 0x01
 8f6:	3a 81       	ldd	r19, Y+2	; 0x02
 8f8:	2f 70       	andi	r18, 0x0F	; 15
 8fa:	33 27       	eor	r19, r19
 8fc:	22 0f       	add	r18, r18
 8fe:	33 1f       	adc	r19, r19
 900:	22 95       	swap	r18
 902:	32 95       	swap	r19
 904:	30 7f       	andi	r19, 0xF0	; 240
 906:	32 27       	eor	r19, r18
 908:	20 7f       	andi	r18, 0xF0	; 240
 90a:	32 27       	eor	r19, r18
 90c:	49 85       	ldd	r20, Y+9	; 0x09
 90e:	5a 85       	ldd	r21, Y+10	; 0x0a
 910:	6b 85       	ldd	r22, Y+11	; 0x0b
 912:	7c 85       	ldd	r23, Y+12	; 0x0c
 914:	00 e2       	ldi	r16, 0x20	; 32
 916:	10 e0       	ldi	r17, 0x00	; 0
 918:	ce 01       	movw	r24, r28
 91a:	49 96       	adiw	r24, 0x19	; 25
 91c:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
			? FR_DISK_ERR : FR_OK;
 920:	9e 2d       	mov	r25, r14
 922:	81 11       	cpse	r24, r1
 924:	01 c0       	rjmp	.+2      	; 0x928 <__stack+0x29>
 926:	97 2d       	mov	r25, r7
		if (res != FR_OK) break;
 928:	91 11       	cpse	r25, r1
 92a:	7c c0       	rjmp	.+248    	; 0xa24 <__stack+0x125>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 92c:	89 8d       	ldd	r24, Y+25	; 0x19
 92e:	88 23       	and	r24, r24
 930:	09 f4       	brne	.+2      	; 0x934 <__stack+0x35>
 932:	c4 c0       	rjmp	.+392    	; 0xabc <__stack+0x1bd>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 934:	6c a1       	ldd	r22, Y+36	; 0x24
 936:	63 fd       	sbrc	r22, 3
 938:	11 c0       	rjmp	.+34     	; 0x95c <__stack+0x5d>
 93a:	4b 81       	ldd	r20, Y+3	; 0x03
 93c:	5c 81       	ldd	r21, Y+4	; 0x04
 93e:	de 01       	movw	r26, r28
 940:	59 96       	adiw	r26, 0x19	; 25
 942:	fa 01       	movw	r30, r20
 944:	9a 01       	movw	r18, r20
 946:	25 5f       	subi	r18, 0xF5	; 245
 948:	3f 4f       	sbci	r19, 0xFF	; 255
 94a:	04 c0       	rjmp	.+8      	; 0x954 <__stack+0x55>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 94c:	e2 17       	cp	r30, r18
 94e:	f3 07       	cpc	r31, r19
 950:	09 f4       	brne	.+2      	; 0x954 <__stack+0x55>
 952:	59 c0       	rjmp	.+178    	; 0xa06 <__stack+0x107>
 954:	9d 91       	ld	r25, X+
 956:	81 91       	ld	r24, Z+
 958:	98 17       	cp	r25, r24
 95a:	c1 f3       	breq	.-16     	; 0x94c <__stack+0x4d>
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
 95c:	80 90 87 01 	lds	r8, 0x0187
 960:	90 90 88 01 	lds	r9, 0x0188


	i = dj->index + 1;
 964:	09 81       	ldd	r16, Y+1	; 0x01
 966:	1a 81       	ldd	r17, Y+2	; 0x02
 968:	0f 5f       	subi	r16, 0xFF	; 255
 96a:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 96c:	09 f4       	brne	.+2      	; 0x970 <__stack+0x71>
 96e:	9c c0       	rjmp	.+312    	; 0xaa8 <__stack+0x1a9>
 970:	49 85       	ldd	r20, Y+9	; 0x09
 972:	5a 85       	ldd	r21, Y+10	; 0x0a
 974:	6b 85       	ldd	r22, Y+11	; 0x0b
 976:	7c 85       	ldd	r23, Y+12	; 0x0c
 978:	41 15       	cp	r20, r1
 97a:	51 05       	cpc	r21, r1
 97c:	61 05       	cpc	r22, r1
 97e:	71 05       	cpc	r23, r1
 980:	09 f4       	brne	.+2      	; 0x984 <__stack+0x85>
 982:	94 c0       	rjmp	.+296    	; 0xaac <__stack+0x1ad>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
 984:	c8 01       	movw	r24, r16
 986:	8f 70       	andi	r24, 0x0F	; 15
 988:	99 27       	eor	r25, r25
 98a:	89 2b       	or	r24, r25
 98c:	c9 f5       	brne	.+114    	; 0xa00 <__stack+0x101>
		dj->sect++;			/* Next sector */
 98e:	4f 5f       	subi	r20, 0xFF	; 255
 990:	5f 4f       	sbci	r21, 0xFF	; 255
 992:	6f 4f       	sbci	r22, 0xFF	; 255
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	49 87       	std	Y+9, r20	; 0x09
 998:	5a 87       	std	Y+10, r21	; 0x0a
 99a:	6b 87       	std	Y+11, r22	; 0x0b
 99c:	7c 87       	std	Y+12, r23	; 0x0c

		if (dj->clust == 0) {	/* Static table */
 99e:	8f 81       	ldd	r24, Y+7	; 0x07
 9a0:	98 85       	ldd	r25, Y+8	; 0x08
 9a2:	00 97       	sbiw	r24, 0x00	; 0
 9a4:	41 f4       	brne	.+16     	; 0x9b6 <__stack+0xb7>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
 9a6:	f4 01       	movw	r30, r8
 9a8:	84 81       	ldd	r24, Z+4	; 0x04
 9aa:	95 81       	ldd	r25, Z+5	; 0x05
 9ac:	08 17       	cp	r16, r24
 9ae:	19 07       	cpc	r17, r25
 9b0:	08 f0       	brcs	.+2      	; 0x9b4 <__stack+0xb5>
 9b2:	7e c0       	rjmp	.+252    	; 0xab0 <__stack+0x1b1>
 9b4:	25 c0       	rjmp	.+74     	; 0xa00 <__stack+0x101>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 9b6:	f4 01       	movw	r30, r8
 9b8:	22 81       	ldd	r18, Z+2	; 0x02
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	21 50       	subi	r18, 0x01	; 1
 9be:	31 09       	sbc	r19, r1
 9c0:	a8 01       	movw	r20, r16
 9c2:	52 95       	swap	r21
 9c4:	42 95       	swap	r20
 9c6:	4f 70       	andi	r20, 0x0F	; 15
 9c8:	45 27       	eor	r20, r21
 9ca:	5f 70       	andi	r21, 0x0F	; 15
 9cc:	45 27       	eor	r20, r21
 9ce:	24 23       	and	r18, r20
 9d0:	35 23       	and	r19, r21
 9d2:	23 2b       	or	r18, r19
 9d4:	a9 f4       	brne	.+42     	; 0xa00 <__stack+0x101>
				clst = get_fat(dj->clust);		/* Get next cluster */
 9d6:	0e 94 57 02 	call	0x4ae	; 0x4ae <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
 9da:	82 30       	cpi	r24, 0x02	; 2
 9dc:	91 05       	cpc	r25, r1
 9de:	08 f4       	brcc	.+2      	; 0x9e2 <__stack+0xe3>
 9e0:	69 c0       	rjmp	.+210    	; 0xab4 <__stack+0x1b5>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
 9e2:	f4 01       	movw	r30, r8
 9e4:	26 81       	ldd	r18, Z+6	; 0x06
 9e6:	37 81       	ldd	r19, Z+7	; 0x07
 9e8:	82 17       	cp	r24, r18
 9ea:	93 07       	cpc	r25, r19
 9ec:	08 f0       	brcs	.+2      	; 0x9f0 <__stack+0xf1>
 9ee:	64 c0       	rjmp	.+200    	; 0xab8 <__stack+0x1b9>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
 9f0:	98 87       	std	Y+8, r25	; 0x08
 9f2:	8f 83       	std	Y+7, r24	; 0x07
				dj->sect = clust2sect(clst);
 9f4:	0e 94 c6 01 	call	0x38c	; 0x38c <clust2sect>
 9f8:	69 87       	std	Y+9, r22	; 0x09
 9fa:	7a 87       	std	Y+10, r23	; 0x0a
 9fc:	8b 87       	std	Y+11, r24	; 0x0b
 9fe:	9c 87       	std	Y+12, r25	; 0x0c
			}
		}
	}

	dj->index = i;
 a00:	1a 83       	std	Y+2, r17	; 0x02
 a02:	09 83       	std	Y+1, r16	; 0x01
 a04:	77 cf       	rjmp	.-274    	; 0x8f4 <pf_open+0x10c>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
 a06:	fa 01       	movw	r30, r20
 a08:	83 85       	ldd	r24, Z+11	; 0x0b
 a0a:	81 11       	cpse	r24, r1
 a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__stack+0x129>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
 a0e:	64 ff       	sbrs	r22, 4
 a10:	57 c0       	rjmp	.+174    	; 0xac0 <__stack+0x1c1>

	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir+DIR_FstClusHI);
		clst <<= 16;
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
 a12:	8c a9       	ldd	r24, Y+52	; 0x34
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	98 2f       	mov	r25, r24
 a18:	88 27       	eor	r24, r24
 a1a:	2b a9       	ldd	r18, Y+51	; 0x33
 a1c:	82 2b       	or	r24, r18
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
			}
			dj->sclust = get_clust(dir);	/* Follow next */
 a1e:	9e 83       	std	Y+6, r25	; 0x06
 a20:	8d 83       	std	Y+5, r24	; 0x05
 a22:	36 cf       	rjmp	.-404    	; 0x890 <pf_open+0xa8>
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
 a24:	91 11       	cpse	r25, r1
 a26:	34 c0       	rjmp	.+104    	; 0xa90 <__stack+0x191>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 a28:	89 8d       	ldd	r24, Y+25	; 0x19
 a2a:	88 23       	and	r24, r24
 a2c:	99 f1       	breq	.+102    	; 0xa94 <__stack+0x195>
 a2e:	8c a1       	ldd	r24, Y+36	; 0x24
 a30:	84 fd       	sbrc	r24, 4
 a32:	32 c0       	rjmp	.+100    	; 0xa98 <__stack+0x199>

	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir+DIR_FstClusHI);
		clst <<= 16;
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
 a34:	8c a9       	ldd	r24, Y+52	; 0x34
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	98 2f       	mov	r25, r24
 a3a:	88 27       	eor	r24, r24
 a3c:	2b a9       	ldd	r18, Y+51	; 0x33
 a3e:	82 2b       	or	r24, r18
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;

	fs->org_clust = get_clust(dir);		/* File start cluster */
 a40:	f5 01       	movw	r30, r10
 a42:	95 8f       	std	Z+29, r25	; 0x1d
 a44:	84 8f       	std	Z+28, r24	; 0x1c
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 a46:	28 ad       	ldd	r18, Y+56	; 0x38
 a48:	8f a9       	ldd	r24, Y+55	; 0x37
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	a0 e0       	ldi	r26, 0x00	; 0
 a4e:	b0 e0       	ldi	r27, 0x00	; 0
 a50:	dc 01       	movw	r26, r24
 a52:	99 27       	eor	r25, r25
 a54:	88 27       	eor	r24, r24
 a56:	b2 2b       	or	r27, r18
 a58:	2d a9       	ldd	r18, Y+53	; 0x35
 a5a:	ac 01       	movw	r20, r24
 a5c:	bd 01       	movw	r22, r26
 a5e:	42 2b       	or	r20, r18
 a60:	2e a9       	ldd	r18, Y+54	; 0x36
 a62:	30 e0       	ldi	r19, 0x00	; 0
 a64:	92 2f       	mov	r25, r18
 a66:	88 27       	eor	r24, r24
 a68:	a0 e0       	ldi	r26, 0x00	; 0
 a6a:	b0 e0       	ldi	r27, 0x00	; 0
 a6c:	84 2b       	or	r24, r20
 a6e:	95 2b       	or	r25, r21
 a70:	a6 2b       	or	r26, r22
 a72:	b7 2b       	or	r27, r23
 a74:	80 8f       	std	Z+24, r24	; 0x18
 a76:	91 8f       	std	Z+25, r25	; 0x19
 a78:	a2 8f       	std	Z+26, r26	; 0x1a
 a7a:	b3 8f       	std	Z+27, r27	; 0x1b
	fs->fptr = 0;						/* File pointer */
 a7c:	14 8a       	std	Z+20, r1	; 0x14
 a7e:	15 8a       	std	Z+21, r1	; 0x15
 a80:	16 8a       	std	Z+22, r1	; 0x16
 a82:	17 8a       	std	Z+23, r1	; 0x17
	fs->flag = FA_OPENED;
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	1b c0       	rjmp	.+54     	; 0xac2 <__stack+0x1c3>
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
 a8c:	85 e0       	ldi	r24, 0x05	; 5
 a8e:	19 c0       	rjmp	.+50     	; 0xac2 <__stack+0x1c3>
 a90:	89 2f       	mov	r24, r25
 a92:	17 c0       	rjmp	.+46     	; 0xac2 <__stack+0x1c3>
	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;
 a94:	83 e0       	ldi	r24, 0x03	; 3
 a96:	15 c0       	rjmp	.+42     	; 0xac2 <__stack+0x1c3>
 a98:	83 e0       	ldi	r24, 0x03	; 3
 a9a:	13 c0       	rjmp	.+38     	; 0xac2 <__stack+0x1c3>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
 a9c:	38 30       	cpi	r19, 0x08	; 8
 a9e:	09 f0       	breq	.+2      	; 0xaa2 <__stack+0x1a3>
 aa0:	1a cf       	rjmp	.-460    	; 0x8d6 <pf_open+0xee>
			i = 8; ni = 11;
 aa2:	93 2d       	mov	r25, r3
 aa4:	32 2d       	mov	r19, r2
 aa6:	01 cf       	rjmp	.-510    	; 0x8aa <pf_open+0xc2>
	FATFS *fs = FatFs;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
 aa8:	83 e0       	ldi	r24, 0x03	; 3
 aaa:	0b c0       	rjmp	.+22     	; 0xac2 <__stack+0x1c3>
 aac:	83 e0       	ldi	r24, 0x03	; 3
 aae:	09 c0       	rjmp	.+18     	; 0xac2 <__stack+0x1c3>
	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
 ab0:	83 e0       	ldi	r24, 0x03	; 3
 ab2:	07 c0       	rjmp	.+14     	; 0xac2 <__stack+0x1c3>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
 ab4:	81 e0       	ldi	r24, 0x01	; 1
 ab6:	05 c0       	rjmp	.+10     	; 0xac2 <__stack+0x1c3>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
 ab8:	83 e0       	ldi	r24, 0x03	; 3
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <__stack+0x1c3>
	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 abc:	93 e0       	ldi	r25, 0x03	; 3
 abe:	b2 cf       	rjmp	.-156    	; 0xa24 <__stack+0x125>
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
 ac0:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
 ac2:	e8 96       	adiw	r28, 0x38	; 56
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	f8 94       	cli
 ac8:	de bf       	out	0x3e, r29	; 62
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	cd bf       	out	0x3d, r28	; 61
 ace:	df 91       	pop	r29
 ad0:	cf 91       	pop	r28
 ad2:	1f 91       	pop	r17
 ad4:	0f 91       	pop	r16
 ad6:	ff 90       	pop	r15
 ad8:	ef 90       	pop	r14
 ada:	df 90       	pop	r13
 adc:	cf 90       	pop	r12
 ade:	bf 90       	pop	r11
 ae0:	af 90       	pop	r10
 ae2:	9f 90       	pop	r9
 ae4:	8f 90       	pop	r8
 ae6:	7f 90       	pop	r7
 ae8:	6f 90       	pop	r6
 aea:	5f 90       	pop	r5
 aec:	4f 90       	pop	r4
 aee:	3f 90       	pop	r3
 af0:	2f 90       	pop	r2
 af2:	08 95       	ret

00000af4 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 af4:	2f 92       	push	r2
 af6:	3f 92       	push	r3
 af8:	4f 92       	push	r4
 afa:	5f 92       	push	r5
 afc:	6f 92       	push	r6
 afe:	7f 92       	push	r7
 b00:	8f 92       	push	r8
 b02:	9f 92       	push	r9
 b04:	af 92       	push	r10
 b06:	bf 92       	push	r11
 b08:	cf 92       	push	r12
 b0a:	df 92       	push	r13
 b0c:	ef 92       	push	r14
 b0e:	ff 92       	push	r15
 b10:	0f 93       	push	r16
 b12:	1f 93       	push	r17
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
 b18:	2c 01       	movw	r4, r24
 b1a:	6b 01       	movw	r12, r22
 b1c:	3a 01       	movw	r6, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	UINT rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
 b1e:	e0 90 87 01 	lds	r14, 0x0187
 b22:	f0 90 88 01 	lds	r15, 0x0188


	*br = 0;
 b26:	fa 01       	movw	r30, r20
 b28:	11 82       	std	Z+1, r1	; 0x01
 b2a:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
 b2c:	e1 14       	cp	r14, r1
 b2e:	f1 04       	cpc	r15, r1
 b30:	09 f4       	brne	.+2      	; 0xb34 <pf_read+0x40>
 b32:	b6 c0       	rjmp	.+364    	; 0xca0 <pf_read+0x1ac>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
 b34:	f7 01       	movw	r30, r14
 b36:	81 81       	ldd	r24, Z+1	; 0x01
 b38:	80 ff       	sbrs	r24, 0
 b3a:	b4 c0       	rjmp	.+360    	; 0xca4 <pf_read+0x1b0>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
 b3c:	80 8d       	ldd	r24, Z+24	; 0x18
 b3e:	91 8d       	ldd	r25, Z+25	; 0x19
 b40:	a2 8d       	ldd	r26, Z+26	; 0x1a
 b42:	b3 8d       	ldd	r27, Z+27	; 0x1b
 b44:	44 89       	ldd	r20, Z+20	; 0x14
 b46:	55 89       	ldd	r21, Z+21	; 0x15
 b48:	66 89       	ldd	r22, Z+22	; 0x16
 b4a:	77 89       	ldd	r23, Z+23	; 0x17
 b4c:	84 1b       	sub	r24, r20
 b4e:	95 0b       	sbc	r25, r21
 b50:	a6 0b       	sbc	r26, r22
 b52:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
 b54:	a6 01       	movw	r20, r12
 b56:	60 e0       	ldi	r22, 0x00	; 0
 b58:	70 e0       	ldi	r23, 0x00	; 0
 b5a:	84 17       	cp	r24, r20
 b5c:	95 07       	cpc	r25, r21
 b5e:	a6 07       	cpc	r26, r22
 b60:	b7 07       	cpc	r27, r23
 b62:	08 f4       	brcc	.+2      	; 0xb66 <pf_read+0x72>
 b64:	6c 01       	movw	r12, r24

	while (btr)	{									/* Repeat until all data transferred */
 b66:	c1 14       	cp	r12, r1
 b68:	d1 04       	cpc	r13, r1
 b6a:	09 f4       	brne	.+2      	; 0xb6e <pf_read+0x7a>
 b6c:	9d c0       	rjmp	.+314    	; 0xca8 <pf_read+0x1b4>
 b6e:	52 01       	movw	r10, r4
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) ABORT(FR_DISK_ERR);
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
 b70:	81 2c       	mov	r8, r1
 b72:	68 94       	set
 b74:	99 24       	eor	r9, r9
 b76:	91 f8       	bld	r9, 1
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
 b78:	31 2c       	mov	r3, r1
 b7a:	21 2c       	mov	r2, r1

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
 b7c:	f7 01       	movw	r30, r14
 b7e:	84 89       	ldd	r24, Z+20	; 0x14
 b80:	95 89       	ldd	r25, Z+21	; 0x15
 b82:	a6 89       	ldd	r26, Z+22	; 0x16
 b84:	b7 89       	ldd	r27, Z+23	; 0x17
 b86:	ac 01       	movw	r20, r24
 b88:	bd 01       	movw	r22, r26
 b8a:	51 70       	andi	r21, 0x01	; 1
 b8c:	66 27       	eor	r22, r22
 b8e:	77 27       	eor	r23, r23
 b90:	45 2b       	or	r20, r21
 b92:	46 2b       	or	r20, r22
 b94:	47 2b       	or	r20, r23
 b96:	09 f0       	breq	.+2      	; 0xb9a <pf_read+0xa6>
 b98:	3e c0       	rjmp	.+124    	; 0xc16 <pf_read+0x122>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
 b9a:	c2 81       	ldd	r28, Z+2	; 0x02
 b9c:	c1 50       	subi	r28, 0x01	; 1
 b9e:	ac 01       	movw	r20, r24
 ba0:	bd 01       	movw	r22, r26
 ba2:	03 2e       	mov	r0, r19
 ba4:	39 e0       	ldi	r19, 0x09	; 9
 ba6:	76 95       	lsr	r23
 ba8:	67 95       	ror	r22
 baa:	57 95       	ror	r21
 bac:	47 95       	ror	r20
 bae:	3a 95       	dec	r19
 bb0:	d1 f7       	brne	.-12     	; 0xba6 <pf_read+0xb2>
 bb2:	30 2d       	mov	r19, r0
 bb4:	c4 23       	and	r28, r20
			if (!cs) {								/* On the cluster boundary? */
 bb6:	b1 f4       	brne	.+44     	; 0xbe4 <pf_read+0xf0>
				if (fs->fptr == 0)					/* On the top of the file? */
 bb8:	89 2b       	or	r24, r25
 bba:	8a 2b       	or	r24, r26
 bbc:	8b 2b       	or	r24, r27
 bbe:	19 f4       	brne	.+6      	; 0xbc6 <pf_read+0xd2>
					clst = fs->org_clust;
 bc0:	84 8d       	ldd	r24, Z+28	; 0x1c
 bc2:	95 8d       	ldd	r25, Z+29	; 0x1d
 bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <pf_read+0xdc>
				else
					clst = get_fat(fs->curr_clust);
 bc6:	f7 01       	movw	r30, r14
 bc8:	86 8d       	ldd	r24, Z+30	; 0x1e
 bca:	97 8d       	ldd	r25, Z+31	; 0x1f
 bcc:	0e 94 57 02 	call	0x4ae	; 0x4ae <get_fat>
				if (clst <= 1) ABORT(FR_DISK_ERR);
 bd0:	82 30       	cpi	r24, 0x02	; 2
 bd2:	91 05       	cpc	r25, r1
 bd4:	20 f4       	brcc	.+8      	; 0xbde <pf_read+0xea>
 bd6:	f7 01       	movw	r30, r14
 bd8:	11 82       	std	Z+1, r1	; 0x01
 bda:	81 e0       	ldi	r24, 0x01	; 1
 bdc:	66 c0       	rjmp	.+204    	; 0xcaa <pf_read+0x1b6>
				fs->curr_clust = clst;				/* Update current cluster */
 bde:	f7 01       	movw	r30, r14
 be0:	97 8f       	std	Z+31, r25	; 0x1f
 be2:	86 8f       	std	Z+30, r24	; 0x1e
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
 be4:	f7 01       	movw	r30, r14
 be6:	86 8d       	ldd	r24, Z+30	; 0x1e
 be8:	97 8d       	ldd	r25, Z+31	; 0x1f
 bea:	0e 94 c6 01 	call	0x38c	; 0x38c <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
 bee:	61 15       	cp	r22, r1
 bf0:	71 05       	cpc	r23, r1
 bf2:	81 05       	cpc	r24, r1
 bf4:	91 05       	cpc	r25, r1
 bf6:	21 f4       	brne	.+8      	; 0xc00 <pf_read+0x10c>
 bf8:	f7 01       	movw	r30, r14
 bfa:	11 82       	std	Z+1, r1	; 0x01
 bfc:	81 e0       	ldi	r24, 0x01	; 1
 bfe:	55 c0       	rjmp	.+170    	; 0xcaa <pf_read+0x1b6>
			fs->dsect = sect + cs;
 c00:	dc 01       	movw	r26, r24
 c02:	cb 01       	movw	r24, r22
 c04:	8c 0f       	add	r24, r28
 c06:	91 1d       	adc	r25, r1
 c08:	a1 1d       	adc	r26, r1
 c0a:	b1 1d       	adc	r27, r1
 c0c:	f7 01       	movw	r30, r14
 c0e:	80 a3       	std	Z+32, r24	; 0x20
 c10:	91 a3       	std	Z+33, r25	; 0x21
 c12:	a2 a3       	std	Z+34, r26	; 0x22
 c14:	b3 a3       	std	Z+35, r27	; 0x23
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
 c16:	f7 01       	movw	r30, r14
 c18:	44 89       	ldd	r20, Z+20	; 0x14
 c1a:	55 89       	ldd	r21, Z+21	; 0x15
 c1c:	66 89       	ldd	r22, Z+22	; 0x16
 c1e:	77 89       	ldd	r23, Z+23	; 0x17
 c20:	ca 01       	movw	r24, r20
 c22:	91 70       	andi	r25, 0x01	; 1
 c24:	94 01       	movw	r18, r8
 c26:	28 1b       	sub	r18, r24
 c28:	39 0b       	sbc	r19, r25
 c2a:	e6 01       	movw	r28, r12
 c2c:	2c 15       	cp	r18, r12
 c2e:	3d 05       	cpc	r19, r13
 c30:	08 f4       	brcc	.+2      	; 0xc34 <pf_read+0x140>
 c32:	e9 01       	movw	r28, r18
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
 c34:	9a 01       	movw	r18, r20
 c36:	31 70       	andi	r19, 0x01	; 1
 c38:	f7 01       	movw	r30, r14
 c3a:	40 a1       	ldd	r20, Z+32	; 0x20
 c3c:	51 a1       	ldd	r21, Z+33	; 0x21
 c3e:	62 a1       	ldd	r22, Z+34	; 0x22
 c40:	73 a1       	ldd	r23, Z+35	; 0x23
 c42:	41 14       	cp	r4, r1
 c44:	51 04       	cpc	r5, r1
 c46:	19 f0       	breq	.+6      	; 0xc4e <pf_read+0x15a>
 c48:	8a 2d       	mov	r24, r10
 c4a:	9b 2d       	mov	r25, r11
 c4c:	02 c0       	rjmp	.+4      	; 0xc52 <pf_read+0x15e>
 c4e:	83 2d       	mov	r24, r3
 c50:	92 2d       	mov	r25, r2
 c52:	8e 01       	movw	r16, r28
 c54:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
		if (dr) ABORT(FR_DISK_ERR);
 c58:	88 23       	and	r24, r24
 c5a:	21 f0       	breq	.+8      	; 0xc64 <pf_read+0x170>
 c5c:	f7 01       	movw	r30, r14
 c5e:	11 82       	std	Z+1, r1	; 0x01
 c60:	81 e0       	ldi	r24, 0x01	; 1
 c62:	23 c0       	rjmp	.+70     	; 0xcaa <pf_read+0x1b6>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
 c64:	f7 01       	movw	r30, r14
 c66:	84 89       	ldd	r24, Z+20	; 0x14
 c68:	95 89       	ldd	r25, Z+21	; 0x15
 c6a:	a6 89       	ldd	r26, Z+22	; 0x16
 c6c:	b7 89       	ldd	r27, Z+23	; 0x17
 c6e:	8c 0f       	add	r24, r28
 c70:	9d 1f       	adc	r25, r29
 c72:	a1 1d       	adc	r26, r1
 c74:	b1 1d       	adc	r27, r1
 c76:	84 8b       	std	Z+20, r24	; 0x14
 c78:	95 8b       	std	Z+21, r25	; 0x15
 c7a:	a6 8b       	std	Z+22, r26	; 0x16
 c7c:	b7 8b       	std	Z+23, r27	; 0x17
 c7e:	ac 0e       	add	r10, r28
 c80:	bd 1e       	adc	r11, r29
		btr -= rcnt; *br += rcnt;
 c82:	cc 1a       	sub	r12, r28
 c84:	dd 0a       	sbc	r13, r29
 c86:	f3 01       	movw	r30, r6
 c88:	80 81       	ld	r24, Z
 c8a:	91 81       	ldd	r25, Z+1	; 0x01
 c8c:	c8 0f       	add	r28, r24
 c8e:	d9 1f       	adc	r29, r25
 c90:	d1 83       	std	Z+1, r29	; 0x01
 c92:	c0 83       	st	Z, r28
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
 c94:	c1 14       	cp	r12, r1
 c96:	d1 04       	cpc	r13, r1
 c98:	09 f0       	breq	.+2      	; 0xc9c <pf_read+0x1a8>
 c9a:	70 cf       	rjmp	.-288    	; 0xb7c <pf_read+0x88>
		if (dr) ABORT(FR_DISK_ERR);
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
 c9c:	80 e0       	ldi	r24, 0x00	; 0
 c9e:	05 c0       	rjmp	.+10     	; 0xcaa <pf_read+0x1b6>
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
 ca0:	85 e0       	ldi	r24, 0x05	; 5
 ca2:	03 c0       	rjmp	.+6      	; 0xcaa <pf_read+0x1b6>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
 ca4:	84 e0       	ldi	r24, 0x04	; 4
 ca6:	01 c0       	rjmp	.+2      	; 0xcaa <pf_read+0x1b6>
		if (dr) ABORT(FR_DISK_ERR);
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
 ca8:	80 e0       	ldi	r24, 0x00	; 0
}
 caa:	df 91       	pop	r29
 cac:	cf 91       	pop	r28
 cae:	1f 91       	pop	r17
 cb0:	0f 91       	pop	r16
 cb2:	ff 90       	pop	r15
 cb4:	ef 90       	pop	r14
 cb6:	df 90       	pop	r13
 cb8:	cf 90       	pop	r12
 cba:	bf 90       	pop	r11
 cbc:	af 90       	pop	r10
 cbe:	9f 90       	pop	r9
 cc0:	8f 90       	pop	r8
 cc2:	7f 90       	pop	r7
 cc4:	6f 90       	pop	r6
 cc6:	5f 90       	pop	r5
 cc8:	4f 90       	pop	r4
 cca:	3f 90       	pop	r3
 ccc:	2f 90       	pop	r2
 cce:	08 95       	ret

00000cd0 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 cd0:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 cd4:	87 e6       	ldi	r24, 0x67	; 103
 cd6:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 cda:	e0 ec       	ldi	r30, 0xC0	; 192
 cdc:	f0 e0       	ldi	r31, 0x00	; 0
 cde:	80 81       	ld	r24, Z
 ce0:	8d 7f       	andi	r24, 0xFD	; 253
 ce2:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 ce4:	88 e1       	ldi	r24, 0x18	; 24
 ce6:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 cea:	86 e0       	ldi	r24, 0x06	; 6
 cec:	80 93 c2 00 	sts	0x00C2, r24
 cf0:	08 95       	ret

00000cf2 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 cf2:	e0 ec       	ldi	r30, 0xC0	; 192
 cf4:	f0 e0       	ldi	r31, 0x00	; 0
 cf6:	90 81       	ld	r25, Z
 cf8:	95 ff       	sbrs	r25, 5
 cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
 cfc:	80 93 c6 00 	sts	0x00C6, r24
 d00:	08 95       	ret

00000d02 <printString>:
}


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 d02:	0f 93       	push	r16
 d04:	1f 93       	push	r17
 d06:	cf 93       	push	r28
 d08:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 d0a:	80 81       	ld	r24, Z
 d0c:	88 23       	and	r24, r24
 d0e:	59 f0       	breq	.+22     	; 0xd26 <printString+0x24>
 d10:	8f 01       	movw	r16, r30
 d12:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 d14:	0e 94 79 06 	call	0xcf2	; 0xcf2 <transmitByte>
    i++;
 d18:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 d1a:	f8 01       	movw	r30, r16
 d1c:	ec 0f       	add	r30, r28
 d1e:	f1 1d       	adc	r31, r1
 d20:	80 81       	ld	r24, Z
 d22:	81 11       	cpse	r24, r1
 d24:	f7 cf       	rjmp	.-18     	; 0xd14 <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 d26:	cf 91       	pop	r28
 d28:	1f 91       	pop	r17
 d2a:	0f 91       	pop	r16
 d2c:	08 95       	ret

00000d2e <printLine>:

void printLine(const char myString[]) {
 d2e:	0f 93       	push	r16
 d30:	1f 93       	push	r17
 d32:	cf 93       	push	r28
 d34:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	while (myString[i]) {
 d36:	fc 01       	movw	r30, r24
 d38:	80 81       	ld	r24, Z
 d3a:	88 23       	and	r24, r24
 d3c:	51 f0       	breq	.+20     	; 0xd52 <printLine+0x24>
 d3e:	c0 e0       	ldi	r28, 0x00	; 0
		transmitByte(myString[i]);
 d40:	0e 94 79 06 	call	0xcf2	; 0xcf2 <transmitByte>
		i++;
 d44:	cf 5f       	subi	r28, 0xFF	; 255
  }
}

void printLine(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
 d46:	f8 01       	movw	r30, r16
 d48:	ec 0f       	add	r30, r28
 d4a:	f1 1d       	adc	r31, r1
 d4c:	80 81       	ld	r24, Z
 d4e:	81 11       	cpse	r24, r1
 d50:	f7 cf       	rjmp	.-18     	; 0xd40 <printLine+0x12>
		transmitByte(myString[i]);
		i++;
	}
	transmitByte(10);
 d52:	8a e0       	ldi	r24, 0x0A	; 10
 d54:	0e 94 79 06 	call	0xcf2	; 0xcf2 <transmitByte>
}
 d58:	cf 91       	pop	r28
 d5a:	1f 91       	pop	r17
 d5c:	0f 91       	pop	r16
 d5e:	08 95       	ret

00000d60 <main>:

#include <util/delay.h>
#include "USART.h"

int main(void)
{
 d60:	cf 93       	push	r28
 d62:	df 93       	push	r29
 d64:	cd b7       	in	r28, 0x3d	; 61
 d66:	de b7       	in	r29, 0x3e	; 62
 d68:	c2 54       	subi	r28, 0x42	; 66
 d6a:	d1 09       	sbc	r29, r1
 d6c:	0f b6       	in	r0, 0x3f	; 63
 d6e:	f8 94       	cli
 d70:	de bf       	out	0x3e, r29	; 62
 d72:	0f be       	out	0x3f, r0	; 63
 d74:	cd bf       	out	0x3d, r28	; 61

	char byte_string[16];
	
	FATFS fs;
	FRESULT mountResult, openFileResult, readFromFileResult;
	const char path2file[] = "DATALOG.TXT";
 d76:	8c e0       	ldi	r24, 0x0C	; 12
 d78:	ea e7       	ldi	r30, 0x7A	; 122
 d7a:	f1 e0       	ldi	r31, 0x01	; 1
 d7c:	de 01       	movw	r26, r28
 d7e:	d5 96       	adiw	r26, 0x35	; 53
 d80:	01 90       	ld	r0, Z+
 d82:	0d 92       	st	X+, r0
 d84:	8a 95       	dec	r24
 d86:	e1 f7       	brne	.-8      	; 0xd80 <main+0x20>
	
	initUSART();
 d88:	0e 94 68 06 	call	0xcd0	; 0xcd0 <initUSART>
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 d8c:	90 e0       	ldi	r25, 0x00	; 0
 d8e:	80 e8       	ldi	r24, 0x80	; 128
 d90:	0f b6       	in	r0, 0x3f	; 63
 d92:	f8 94       	cli
 d94:	80 93 61 00 	sts	0x0061, r24
 d98:	90 93 61 00 	sts	0x0061, r25
 d9c:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1); // set clock to 16MHz
	
	mountResult = pf_mount(&fs);
 d9e:	ce 01       	movw	r24, r28
 da0:	41 96       	adiw	r24, 0x11	; 17
 da2:	0e 94 9f 02 	call	0x53e	; 0x53e <pf_mount>
	if (mountResult != 0) {
 da6:	88 23       	and	r24, r24
 da8:	29 f0       	breq	.+10     	; 0xdb4 <main+0x54>
		printLine("Error mounting the SD card");
 daa:	80 e0       	ldi	r24, 0x00	; 0
 dac:	91 e0       	ldi	r25, 0x01	; 1
 dae:	0e 94 97 06 	call	0xd2e	; 0xd2e <printLine>
		while(1);
 db2:	ff cf       	rjmp	.-2      	; 0xdb2 <main+0x52>
	}
	printString("Mount: ");
 db4:	8b e1       	ldi	r24, 0x1B	; 27
 db6:	91 e0       	ldi	r25, 0x01	; 1
 db8:	0e 94 81 06 	call	0xd02	; 0xd02 <printString>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 dbc:	4a e0       	ldi	r20, 0x0A	; 10
 dbe:	be 01       	movw	r22, r28
 dc0:	6f 5f       	subi	r22, 0xFF	; 255
 dc2:	7f 4f       	sbci	r23, 0xFF	; 255
 dc4:	80 e0       	ldi	r24, 0x00	; 0
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	0e 94 83 07 	call	0xf06	; 0xf06 <__utoa_ncheck>
	utoa(mountResult, byte_string, 10);
	printLine(byte_string);
 dcc:	ce 01       	movw	r24, r28
 dce:	01 96       	adiw	r24, 0x01	; 1
 dd0:	0e 94 97 06 	call	0xd2e	; 0xd2e <printLine>
	
	openFileResult = pf_open(path2file);
 dd4:	ce 01       	movw	r24, r28
 dd6:	c5 96       	adiw	r24, 0x35	; 53
 dd8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <pf_open>
	if (openFileResult != 0) {
 ddc:	88 23       	and	r24, r24
 dde:	29 f0       	breq	.+10     	; 0xdea <main+0x8a>
		printLine("Error creating a new file");
 de0:	83 e2       	ldi	r24, 0x23	; 35
 de2:	91 e0       	ldi	r25, 0x01	; 1
 de4:	0e 94 97 06 	call	0xd2e	; 0xd2e <printLine>
		while(1);
 de8:	ff cf       	rjmp	.-2      	; 0xde8 <main+0x88>
	}
	printString("New File: ");
 dea:	8d e3       	ldi	r24, 0x3D	; 61
 dec:	91 e0       	ldi	r25, 0x01	; 1
 dee:	0e 94 81 06 	call	0xd02	; 0xd02 <printString>
 df2:	4a e0       	ldi	r20, 0x0A	; 10
 df4:	be 01       	movw	r22, r28
 df6:	6f 5f       	subi	r22, 0xFF	; 255
 df8:	7f 4f       	sbci	r23, 0xFF	; 255
 dfa:	80 e0       	ldi	r24, 0x00	; 0
 dfc:	90 e0       	ldi	r25, 0x00	; 0
 dfe:	0e 94 83 07 	call	0xf06	; 0xf06 <__utoa_ncheck>
	utoa(openFileResult, byte_string, 10);
	printLine(byte_string);
 e02:	ce 01       	movw	r24, r28
 e04:	01 96       	adiw	r24, 0x01	; 1
 e06:	0e 94 97 06 	call	0xd2e	; 0xd2e <printLine>
	
	//char readBuff[14];
	UINT bytesRead = 0;
 e0a:	23 96       	adiw	r28, 0x03	; 3
 e0c:	1f ae       	std	Y+63, r1	; 0x3f
 e0e:	1e ae       	std	Y+62, r1	; 0x3e
 e10:	23 97       	sbiw	r28, 0x03	; 3
	printLine("Bytes read");
	utoa(bytesRead, byte_string, 10);
	printLine(byte_string);
	*/
	
	printString("File Content: ");
 e12:	88 e4       	ldi	r24, 0x48	; 72
 e14:	91 e0       	ldi	r25, 0x01	; 1
 e16:	0e 94 81 06 	call	0xd02	; 0xd02 <printString>
	do {
		readFromFileResult = pf_read(0, 512, &bytesRead);
 e1a:	ae 01       	movw	r20, r28
 e1c:	4f 5b       	subi	r20, 0xBF	; 191
 e1e:	5f 4f       	sbci	r21, 0xFF	; 255
 e20:	60 e0       	ldi	r22, 0x00	; 0
 e22:	72 e0       	ldi	r23, 0x02	; 2
 e24:	80 e0       	ldi	r24, 0x00	; 0
 e26:	90 e0       	ldi	r25, 0x00	; 0
 e28:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <pf_read>
	} while(!(readFromFileResult || bytesRead < 512));
 e2c:	81 11       	cpse	r24, r1
 e2e:	07 c0       	rjmp	.+14     	; 0xe3e <main+0xde>
 e30:	23 96       	adiw	r28, 0x03	; 3
 e32:	8e ad       	ldd	r24, Y+62	; 0x3e
 e34:	9f ad       	ldd	r25, Y+63	; 0x3f
 e36:	23 97       	sbiw	r28, 0x03	; 3
 e38:	81 15       	cp	r24, r1
 e3a:	92 40       	sbci	r25, 0x02	; 2
 e3c:	70 f7       	brcc	.-36     	; 0xe1a <main+0xba>
	
	printLine("");
 e3e:	8f e6       	ldi	r24, 0x6F	; 111
 e40:	91 e0       	ldi	r25, 0x01	; 1
 e42:	0e 94 97 06 	call	0xd2e	; 0xd2e <printLine>
	printLine("EOF Reached");
 e46:	87 e5       	ldi	r24, 0x57	; 87
 e48:	91 e0       	ldi	r25, 0x01	; 1
 e4a:	0e 94 97 06 	call	0xd2e	; 0xd2e <printLine>
 e4e:	4a e0       	ldi	r20, 0x0A	; 10
 e50:	be 01       	movw	r22, r28
 e52:	6f 5f       	subi	r22, 0xFF	; 255
 e54:	7f 4f       	sbci	r23, 0xFF	; 255
 e56:	23 96       	adiw	r28, 0x03	; 3
 e58:	8e ad       	ldd	r24, Y+62	; 0x3e
 e5a:	9f ad       	ldd	r25, Y+63	; 0x3f
 e5c:	23 97       	sbiw	r28, 0x03	; 3
 e5e:	0e 94 83 07 	call	0xf06	; 0xf06 <__utoa_ncheck>
	utoa(bytesRead, byte_string, 10);
	printString("Bytes read: ");
 e62:	83 e6       	ldi	r24, 0x63	; 99
 e64:	91 e0       	ldi	r25, 0x01	; 1
 e66:	0e 94 81 06 	call	0xd02	; 0xd02 <printString>
	printLine(byte_string);
 e6a:	ce 01       	movw	r24, r28
 e6c:	01 96       	adiw	r24, 0x01	; 1
 e6e:	0e 94 97 06 	call	0xd2e	; 0xd2e <printLine>
	
    while (1) 
    {
		printLine("main loop");
 e72:	80 e7       	ldi	r24, 0x70	; 112
 e74:	91 e0       	ldi	r25, 0x01	; 1
 e76:	0e 94 97 06 	call	0xd2e	; 0xd2e <printLine>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 e7a:	8f ef       	ldi	r24, 0xFF	; 255
 e7c:	93 ed       	ldi	r25, 0xD3	; 211
 e7e:	20 e3       	ldi	r18, 0x30	; 48
 e80:	81 50       	subi	r24, 0x01	; 1
 e82:	90 40       	sbci	r25, 0x00	; 0
 e84:	20 40       	sbci	r18, 0x00	; 0
 e86:	e1 f7       	brne	.-8      	; 0xe80 <main+0x120>
 e88:	00 c0       	rjmp	.+0      	; 0xe8a <main+0x12a>
 e8a:	00 00       	nop
 e8c:	f2 cf       	rjmp	.-28     	; 0xe72 <main+0x112>

00000e8e <__udivmodsi4>:
 e8e:	a1 e2       	ldi	r26, 0x21	; 33
 e90:	1a 2e       	mov	r1, r26
 e92:	aa 1b       	sub	r26, r26
 e94:	bb 1b       	sub	r27, r27
 e96:	fd 01       	movw	r30, r26
 e98:	0d c0       	rjmp	.+26     	; 0xeb4 <__udivmodsi4_ep>

00000e9a <__udivmodsi4_loop>:
 e9a:	aa 1f       	adc	r26, r26
 e9c:	bb 1f       	adc	r27, r27
 e9e:	ee 1f       	adc	r30, r30
 ea0:	ff 1f       	adc	r31, r31
 ea2:	a2 17       	cp	r26, r18
 ea4:	b3 07       	cpc	r27, r19
 ea6:	e4 07       	cpc	r30, r20
 ea8:	f5 07       	cpc	r31, r21
 eaa:	20 f0       	brcs	.+8      	; 0xeb4 <__udivmodsi4_ep>
 eac:	a2 1b       	sub	r26, r18
 eae:	b3 0b       	sbc	r27, r19
 eb0:	e4 0b       	sbc	r30, r20
 eb2:	f5 0b       	sbc	r31, r21

00000eb4 <__udivmodsi4_ep>:
 eb4:	66 1f       	adc	r22, r22
 eb6:	77 1f       	adc	r23, r23
 eb8:	88 1f       	adc	r24, r24
 eba:	99 1f       	adc	r25, r25
 ebc:	1a 94       	dec	r1
 ebe:	69 f7       	brne	.-38     	; 0xe9a <__udivmodsi4_loop>
 ec0:	60 95       	com	r22
 ec2:	70 95       	com	r23
 ec4:	80 95       	com	r24
 ec6:	90 95       	com	r25
 ec8:	9b 01       	movw	r18, r22
 eca:	ac 01       	movw	r20, r24
 ecc:	bd 01       	movw	r22, r26
 ece:	cf 01       	movw	r24, r30
 ed0:	08 95       	ret

00000ed2 <__umulhisi3>:
 ed2:	a2 9f       	mul	r26, r18
 ed4:	b0 01       	movw	r22, r0
 ed6:	b3 9f       	mul	r27, r19
 ed8:	c0 01       	movw	r24, r0
 eda:	a3 9f       	mul	r26, r19
 edc:	70 0d       	add	r23, r0
 ede:	81 1d       	adc	r24, r1
 ee0:	11 24       	eor	r1, r1
 ee2:	91 1d       	adc	r25, r1
 ee4:	b2 9f       	mul	r27, r18
 ee6:	70 0d       	add	r23, r0
 ee8:	81 1d       	adc	r24, r1
 eea:	11 24       	eor	r1, r1
 eec:	91 1d       	adc	r25, r1
 eee:	08 95       	ret

00000ef0 <__muluhisi3>:
 ef0:	0e 94 69 07 	call	0xed2	; 0xed2 <__umulhisi3>
 ef4:	a5 9f       	mul	r26, r21
 ef6:	90 0d       	add	r25, r0
 ef8:	b4 9f       	mul	r27, r20
 efa:	90 0d       	add	r25, r0
 efc:	a4 9f       	mul	r26, r20
 efe:	80 0d       	add	r24, r0
 f00:	91 1d       	adc	r25, r1
 f02:	11 24       	eor	r1, r1
 f04:	08 95       	ret

00000f06 <__utoa_ncheck>:
 f06:	bb 27       	eor	r27, r27

00000f08 <__utoa_common>:
 f08:	fb 01       	movw	r30, r22
 f0a:	55 27       	eor	r21, r21
 f0c:	aa 27       	eor	r26, r26
 f0e:	88 0f       	add	r24, r24
 f10:	99 1f       	adc	r25, r25
 f12:	aa 1f       	adc	r26, r26
 f14:	a4 17       	cp	r26, r20
 f16:	10 f0       	brcs	.+4      	; 0xf1c <__utoa_common+0x14>
 f18:	a4 1b       	sub	r26, r20
 f1a:	83 95       	inc	r24
 f1c:	50 51       	subi	r21, 0x10	; 16
 f1e:	b9 f7       	brne	.-18     	; 0xf0e <__utoa_common+0x6>
 f20:	a0 5d       	subi	r26, 0xD0	; 208
 f22:	aa 33       	cpi	r26, 0x3A	; 58
 f24:	08 f0       	brcs	.+2      	; 0xf28 <__utoa_common+0x20>
 f26:	a9 5d       	subi	r26, 0xD9	; 217
 f28:	a1 93       	st	Z+, r26
 f2a:	00 97       	sbiw	r24, 0x00	; 0
 f2c:	79 f7       	brne	.-34     	; 0xf0c <__utoa_common+0x4>
 f2e:	b1 11       	cpse	r27, r1
 f30:	b1 93       	st	Z+, r27
 f32:	11 92       	st	Z+, r1
 f34:	cb 01       	movw	r24, r22
 f36:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <strrev>

00000f3a <strrev>:
 f3a:	dc 01       	movw	r26, r24
 f3c:	fc 01       	movw	r30, r24
 f3e:	67 2f       	mov	r22, r23
 f40:	71 91       	ld	r23, Z+
 f42:	77 23       	and	r23, r23
 f44:	e1 f7       	brne	.-8      	; 0xf3e <strrev+0x4>
 f46:	32 97       	sbiw	r30, 0x02	; 2
 f48:	04 c0       	rjmp	.+8      	; 0xf52 <strrev+0x18>
 f4a:	7c 91       	ld	r23, X
 f4c:	6d 93       	st	X+, r22
 f4e:	70 83       	st	Z, r23
 f50:	62 91       	ld	r22, -Z
 f52:	ae 17       	cp	r26, r30
 f54:	bf 07       	cpc	r27, r31
 f56:	c8 f3       	brcs	.-14     	; 0xf4a <strrev+0x10>
 f58:	08 95       	ret

00000f5a <_exit>:
 f5a:	f8 94       	cli

00000f5c <__stop_program>:
 f5c:	ff cf       	rjmp	.-2      	; 0xf5c <__stop_program>
